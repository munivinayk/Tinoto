{"ast":null,"code":"import QuickLRU from 'quick-lru';\nfunction tryGettingFetch() {\n  if (typeof self !== \"undefined\") {\n    return fetch.bind(self);\n  }\n  if (typeof global !== \"undefined\" && global.fetch) {\n    return global.fetch;\n  }\n  return null;\n}\nclass ClientConfig {\n  constructor() {\n    /**\n     * MapTiler Cloud API key\n     */\n    this._apiKey = \"\";\n    /**\n     * The fetch function. To be set if in Node < 18, otherwise\n     * will be automatically resolved.\n     */\n    this._fetch = tryGettingFetch();\n    /**\n     * Number of tiles to keep in cache\n     */\n    this.tileCacheSize = 200;\n  }\n  /**\n   * Set the MapTiler Cloud API key\n   */\n  set apiKey(k) {\n    this._apiKey = k;\n  }\n  /**\n   * Get the MapTiler Cloud API key\n   */\n  get apiKey() {\n    return this._apiKey;\n  }\n  /**\n   * Set a the custom fetch function to replace the default one\n   */\n  set fetch(f) {\n    this._fetch = f;\n  }\n  /**\n   * Get the fetch fucntion\n   */\n  get fetch() {\n    return this._fetch;\n  }\n}\nconst config = new ClientConfig();\nconst LanguageGeocoding = {\n  AUTO: \"auto\",\n  ALBANIAN: \"sq\",\n  ARABIC: \"ar\",\n  ARMENIAN: \"hy\",\n  AZERBAIJANI: \"az\",\n  BELORUSSIAN: \"be\",\n  BOSNIAN: \"bs\",\n  BRETON: \"br\",\n  BULGARIAN: \"bg\",\n  CATALAN: \"ca\",\n  CHINESE: \"zh\",\n  CROATIAN: \"hr\",\n  CZECH: \"cs\",\n  DANISH: \"da\",\n  DUTCH: \"nl\",\n  ENGLISH: \"en\",\n  ESPERANTO: \"eo\",\n  ESTONIAN: \"et\",\n  FINNISH: \"fi\",\n  FRENCH: \"fr\",\n  FRISIAN: \"fy\",\n  GEORGIAN: \"ka\",\n  GERMAN: \"de\",\n  GREEK: \"el\",\n  HEBREW: \"he\",\n  HUNGARIAN: \"hu\",\n  ICELANDIC: \"is\",\n  IRISH: \"ga\",\n  ITALIAN: \"it\",\n  JAPANESE: \"ja\",\n  KANNADA: \"kn\",\n  KAZAKH: \"kk\",\n  KOREAN: \"ko\",\n  ROMAN_LATIN: \"la\",\n  LATVIAN: \"lv\",\n  LITHUANIAN: \"lt\",\n  LUXEMBOURGISH: \"lb\",\n  MACEDONIAN: \"mk\",\n  MALTESE: \"mt\",\n  NORWEGIAN: \"no\",\n  POLISH: \"pl\",\n  PORTUGUESE: \"pt\",\n  ROMANIAN: \"ro\",\n  ROMANSH: \"rm\",\n  RUSSIAN: \"ru\",\n  SCOTTISH_GAELIC: \"gd\",\n  SERBIAN_CYRILLIC: \"sr\",\n  SLOVAK: \"sk\",\n  SLOVENE: \"sl\",\n  SPANISH: \"es\",\n  SWEDISH: \"sv\",\n  THAI: \"th\",\n  TURKISH: \"tr\",\n  UKRAINIAN: \"uk\",\n  WELSH: \"cy\"\n};\nconst languageCodeSet = new Set(Object.values(LanguageGeocoding));\nfunction getAutoLanguageGeocoding() {\n  if (typeof navigator === \"undefined\") {\n    return Intl.DateTimeFormat().resolvedOptions().locale.split(\"-\")[0];\n  }\n  const canditatelangs = Array.from(new Set(navigator.languages.map(l => l.split(\"-\")[0]))).filter(l => languageCodeSet.has(l));\n  return canditatelangs.length ? canditatelangs[0] : LanguageGeocoding.ENGLISH;\n}\nasync function callFetch(resource, options = {}) {\n  if (config.fetch === null) {\n    throw new Error(\"The fetch function was not found. If on NodeJS < 18 please specify the fetch function with config.fetch\");\n  }\n  if (new URL(resource).searchParams.get(\"key\").trim() === \"\") {\n    throw new Error(\"The MapTiler Cloud API key is missing. Set it in `config.apiKey` or get one for free at https://maptiler.com\");\n  }\n  return config.fetch(resource, options);\n}\nconst defaults = {\n  maptilerApiURL: \"https://api.maptiler.com/\",\n  mapStyle: \"streets-v2\"\n};\nObject.freeze(defaults);\nclass ServiceError extends Error {\n  constructor(res, customMessage = \"\") {\n    super(`Call to enpoint ${res.url} failed with the status code ${res.status}. ${customMessage}`);\n    this.res = res;\n  }\n}\nconst customMessages$4 = {\n  400: \"Query too long / Invalid parameters\",\n  403: \"Key is missing, invalid or restricted\"\n};\nfunction addLanguageGeocodingOptions(searchParams, options) {\n  const {\n    language\n  } = options;\n  if (language == void 0) {\n    return;\n  }\n  const languages = Array.from(new Set((Array.isArray(language) ? language : [language]).map(lang => lang === LanguageGeocoding.AUTO ? getAutoLanguageGeocoding() : lang))).join(\",\");\n  searchParams.set(\"language\", languages);\n}\nfunction addCommonForwardAndReverseGeocodingOptions(searchParams, options) {\n  const {\n    apiKey,\n    limit,\n    types,\n    excludeTypes\n  } = options;\n  searchParams.set(\"key\", apiKey ?? config.apiKey);\n  if (limit != void 0) {\n    searchParams.set(\"limit\", String(limit));\n  }\n  if (types != void 0) {\n    searchParams.set(\"types\", types.join(\",\"));\n  }\n  if (excludeTypes != void 0) {\n    searchParams.set(\"excludeTypes\", String(excludeTypes));\n  }\n  addLanguageGeocodingOptions(searchParams, options);\n}\nfunction addForwardGeocodingOptions(searchParams, options) {\n  addCommonForwardAndReverseGeocodingOptions(searchParams, options);\n  const {\n    bbox,\n    proximity,\n    country,\n    fuzzyMatch,\n    autocomplete\n  } = options;\n  if (bbox != void 0) {\n    searchParams.set(\"bbox\", bbox.join(\",\"));\n  }\n  if (proximity != void 0) {\n    searchParams.set(\"proximity\", proximity === \"ip\" ? proximity : proximity.join(\",\"));\n  }\n  if (country != void 0) {\n    searchParams.set(\"country\", country.join(\",\"));\n  }\n  if (fuzzyMatch != void 0) {\n    searchParams.set(\"fuzzyMatch\", fuzzyMatch ? \"true\" : \"false\");\n  }\n  if (autocomplete != void 0) {\n    searchParams.set(\"autocomplete\", autocomplete ? \"true\" : \"false\");\n  }\n}\nasync function forward(query, options = {}) {\n  if (typeof query !== \"string\" || query.trim().length === 0) {\n    throw new Error(\"The query must be a non-empty string\");\n  }\n  const endpoint = new URL(`geocoding/${encodeURIComponent(query)}.json`, defaults.maptilerApiURL);\n  const {\n    searchParams\n  } = endpoint;\n  addForwardGeocodingOptions(searchParams, options);\n  const urlWithParams = endpoint.toString();\n  const res = await callFetch(urlWithParams);\n  if (!res.ok) {\n    throw new ServiceError(res, customMessages$4[res.status] ?? \"\");\n  }\n  const obj = await res.json();\n  return obj;\n}\nasync function reverse(position, options = {}) {\n  if (!Array.isArray(position) || position.length < 2) {\n    throw new Error(\"The position must be an array of form [lng, lat].\");\n  }\n  const endpoint = new URL(`geocoding/${position[0]},${position[1]}.json`, defaults.maptilerApiURL);\n  addCommonForwardAndReverseGeocodingOptions(endpoint.searchParams, options);\n  const urlWithParams = endpoint.toString();\n  const res = await callFetch(urlWithParams);\n  if (!res.ok) {\n    throw new ServiceError(res, customMessages$4[res.status] ?? \"\");\n  }\n  const obj = await res.json();\n  return obj;\n}\nasync function byId(id, options = {}) {\n  const endpoint = new URL(`geocoding/${id}.json`, defaults.maptilerApiURL);\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n  addLanguageGeocodingOptions(endpoint.searchParams, options);\n  const urlWithParams = endpoint.toString();\n  const res = await callFetch(urlWithParams);\n  if (!res.ok) {\n    throw new ServiceError(res, customMessages$4[res.status] ?? \"\");\n  }\n  const obj = await res.json();\n  return obj;\n}\nasync function batch$1(queries, options = {}) {\n  if (!queries.length) {\n    return [];\n  }\n  const joinedQuery = queries.map(query => encodeURIComponent(query)).join(\";\");\n  const endpoint = new URL(`geocoding/${joinedQuery}.json`, defaults.maptilerApiURL);\n  const {\n    searchParams\n  } = endpoint;\n  addForwardGeocodingOptions(searchParams, options);\n  const urlWithParams = endpoint.toString();\n  const res = await callFetch(urlWithParams);\n  if (!res.ok) {\n    throw new ServiceError(res, customMessages$4[res.status] ?? \"\");\n  }\n  const obj = await res.json();\n  return queries.length === 1 ? [obj] : obj;\n}\nconst geocoding = {\n  forward,\n  reverse,\n  byId,\n  batch: batch$1,\n  language: LanguageGeocoding\n};\nconst customMessages$3 = {\n  403: \"Key is missing, invalid or restricted\"\n};\nasync function info(options = {}) {\n  const endpoint = new URL(`geolocation/ip.json`, defaults.maptilerApiURL);\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n  const urlWithParams = endpoint.toString();\n  const res = await callFetch(urlWithParams);\n  if (!res.ok) {\n    throw new ServiceError(res, res.status in customMessages$3 ? customMessages$3[res.status] : \"\");\n  }\n  const obj = await res.json();\n  return obj;\n}\nconst geolocation = {\n  info\n};\nconst customMessages$2 = {\n  403: \"Key is missing, invalid or restricted\"\n};\nasync function search(query, options = {}) {\n  if (typeof query !== \"string\" || query.trim().length === 0) {\n    throw new Error(\"The query must be a non-empty string\");\n  }\n  const endpoint = new URL(`coordinates/search/${query}.json`, defaults.maptilerApiURL);\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n  if (\"limit\" in options) {\n    endpoint.searchParams.set(\"limit\", options.limit.toString());\n  }\n  if (\"transformations\" in options) {\n    endpoint.searchParams.set(\"transformations\", options.transformations.toString());\n  }\n  if (\"exports\" in options) {\n    endpoint.searchParams.set(\"exports\", options.exports.toString());\n  }\n  const urlWithParams = endpoint.toString();\n  const res = await callFetch(urlWithParams);\n  if (!res.ok) {\n    throw new ServiceError(res, res.status in customMessages$2 ? customMessages$2[res.status] : \"\");\n  }\n  const obj = await res.json();\n  return obj;\n}\nasync function transform(positions, options = {}) {\n  const coordinatesStr = (Array.isArray(positions[0]) ? positions : [positions]).map(coord => `${coord[0]},${coord[1]}`).join(\";\");\n  const endpoint = new URL(`coordinates/transform/${coordinatesStr}.json`, defaults.maptilerApiURL);\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n  if (\"sourceCrs\" in options) {\n    endpoint.searchParams.set(\"s_srs\", options.sourceCrs.toString());\n  }\n  if (\"targetCrs\" in options) {\n    endpoint.searchParams.set(\"t_srs\", options.targetCrs.toString());\n  }\n  if (\"operations\" in options) {\n    endpoint.searchParams.set(\"ops\", (Array.isArray(options.operations) ? options.operations : [options.operations]).join(\"|\"));\n  }\n  const urlWithParams = endpoint.toString();\n  const res = await callFetch(urlWithParams);\n  if (!res.ok) {\n    throw new ServiceError(res, res.status in customMessages$2 ? customMessages$2[res.status] : \"\");\n  }\n  const obj = await res.json();\n  return obj;\n}\nconst coordinates = {\n  search,\n  transform\n};\nconst customMessages$1 = {\n  403: \"Key is missing, invalid or restricted\"\n};\nasync function get(dataId, options = {}) {\n  if (typeof dataId !== \"string\" || dataId.trim().length === 0) {\n    throw new Error(\"The data ID must be a non-empty string\");\n  }\n  const endpoint = new URL(`data/${encodeURIComponent(dataId)}/features.json`, defaults.maptilerApiURL);\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n  const urlWithParams = endpoint.toString();\n  const res = await callFetch(urlWithParams);\n  if (!res.ok) {\n    throw new ServiceError(res, res.status in customMessages$1 ? customMessages$1[res.status] : \"\");\n  }\n  const obj = await res.json();\n  return obj;\n}\nconst data = {\n  get\n};\nfunction expandMapStyle(style) {\n  const maptilerDomainRegex = /^maptiler:\\/\\/(.*)/;\n  let match;\n  const trimmed = style.trim();\n  let expandedStyle;\n  if (trimmed.startsWith(\"http://\") || trimmed.startsWith(\"https://\")) {\n    expandedStyle = trimmed;\n  } else if ((match = maptilerDomainRegex.exec(trimmed)) !== null) {\n    expandedStyle = `https://api.maptiler.com/maps/${match[1]}/style.json`;\n  } else {\n    expandedStyle = `https://api.maptiler.com/maps/${trimmed}/style.json`;\n  }\n  return expandedStyle;\n}\nclass MapStyleVariant {\n  constructor(name, variantType, id, referenceStyle, description, imageURL) {\n    this.name = name;\n    this.variantType = variantType;\n    this.id = id;\n    this.referenceStyle = referenceStyle;\n    this.description = description;\n    this.imageURL = imageURL;\n  }\n  /**\n   * Get the human-friendly name\n   * @returns\n   */\n  getName() {\n    return this.name;\n  }\n  getFullName() {\n    return `${this.referenceStyle.getName()} ${this.name}`;\n  }\n  /**\n   * Get the variant type (eg. \"DEFAULT\", \"DARK\", \"PASTEL\", etc.)\n   * @returns\n   */\n  getType() {\n    return this.variantType;\n  }\n  /**\n   * Get the MapTiler Cloud id\n   * @returns\n   */\n  getId() {\n    return this.id;\n  }\n  /**\n   * Get the human-friendly description\n   */\n  getDescription() {\n    return this.description;\n  }\n  /**\n   * Get the reference style this variant belongs to\n   * @returns\n   */\n  getReferenceStyle() {\n    return this.referenceStyle;\n  }\n  /**\n   * Check if a variant of a given type exists for _this_ variants\n   * (eg. if this is a \"DARK\", then we can check if there is a \"LIGHT\" variant of it)\n   * @param variantType\n   * @returns\n   */\n  hasVariant(variantType) {\n    return this.referenceStyle.hasVariant(variantType);\n  }\n  /**\n   * Retrieve the variant of a given type. If not found, will return the \"DEFAULT\" variant.\n   * (eg. _this_ \"DARK\" variant does not have any \"PASTEL\" variant, then the \"DEFAULT\" is returned)\n   * @param variantType\n   * @returns\n   */\n  getVariant(variantType) {\n    return this.referenceStyle.getVariant(variantType);\n  }\n  /**\n   * Get all the variants for _this_ variants, except _this_ current one\n   * @returns\n   */\n  getVariants() {\n    return this.referenceStyle.getVariants().filter(v => v !== this);\n  }\n  /**\n   * Get the image URL that represent _this_ variant\n   * @returns\n   */\n  getImageURL() {\n    return this.imageURL;\n  }\n  /**\n   * Get the style as usable by MapLibre, a string (URL) or a plain style description (StyleSpecification)\n   * @returns\n   */\n  getExpandedStyleURL() {\n    return expandMapStyle(this.getId());\n  }\n}\nclass ReferenceMapStyle {\n  constructor(name, id) {\n    this.name = name;\n    this.id = id;\n    /**\n     * Variants that belong to this reference style, key being the reference type\n     */\n    this.variants = {};\n    /**\n     * Variants that belong to this reference style, ordered by relevance\n     */\n    this.orderedVariants = [];\n  }\n  /**\n   * Get the human-friendly name of this reference style\n   * @returns\n   */\n  getName() {\n    return this.name;\n  }\n  /**\n   * Get the id of _this_ reference style\n   * @returns\n   */\n  getId() {\n    return this.id;\n  }\n  /**\n   * Add a variant to _this_ reference style\n   * @param v\n   */\n  addVariant(v) {\n    this.variants[v.getType()] = v;\n    this.orderedVariants.push(v);\n  }\n  /**\n   * Check if a given variant type exists for this reference style\n   * @param variantType\n   * @returns\n   */\n  hasVariant(variantType) {\n    return variantType in this.variants;\n  }\n  /**\n   * Get a given variant. If the given type of variant does not exist for this reference style,\n   * then the most relevant default variant is returned instead\n   * @param variantType\n   * @returns\n   */\n  getVariant(variantType) {\n    return variantType in this.variants ? this.variants[variantType] : this.orderedVariants[0];\n  }\n  /**\n   * Get the list of variants for this reference style\n   * @returns\n   */\n  getVariants() {\n    return Object.values(this.variants);\n  }\n  /**\n   * Get the defualt variant for this reference style\n   * @returns\n   */\n  getDefaultVariant() {\n    return this.orderedVariants[0];\n  }\n}\nconst mapStylePresetList = [{\n  referenceStyleID: \"STREETS\",\n  name: \"Streets\",\n  description: \"\",\n  variants: [{\n    id: \"streets-v2\",\n    name: \"Default\",\n    variantType: \"DEFAULT\",\n    description: \"\",\n    imageURL: \"\"\n  }, {\n    id: \"streets-v2-dark\",\n    name: \"Dark\",\n    variantType: \"DARK\",\n    description: \"\",\n    imageURL: \"\"\n  }, {\n    id: \"streets-v2-light\",\n    name: \"Light\",\n    variantType: \"LIGHT\",\n    description: \"\",\n    imageURL: \"\"\n  }, {\n    id: \"streets-v2-night\",\n    name: \"Night\",\n    variantType: \"NIGHT\",\n    description: \"\",\n    imageURL: \"\"\n  }, {\n    id: \"streets-v2-pastel\",\n    name: \"Pastel\",\n    variantType: \"PASTEL\",\n    description: \"\",\n    imageURL: \"\"\n  }]\n}, {\n  referenceStyleID: \"OUTDOOR\",\n  name: \"Outdoor\",\n  description: \"\",\n  variants: [{\n    id: \"outdoor-v2\",\n    name: \"Default\",\n    variantType: \"DEFAULT\",\n    description: \"\",\n    imageURL: \"\"\n  }, {\n    id: \"outdoor-v2-dark\",\n    name: \"Dark\",\n    variantType: \"DARK\",\n    description: \"\",\n    imageURL: \"\"\n  }]\n}, {\n  referenceStyleID: \"WINTER\",\n  name: \"Winter\",\n  description: \"\",\n  variants: [{\n    id: \"winter-v2\",\n    name: \"Default\",\n    variantType: \"DEFAULT\",\n    description: \"\",\n    imageURL: \"\"\n  }, {\n    id: \"winter-v2-dark\",\n    name: \"Dark\",\n    variantType: \"DARK\",\n    description: \"\",\n    imageURL: \"\"\n  }]\n}, {\n  referenceStyleID: \"SATELLITE\",\n  name: \"Satellite\",\n  description: \"\",\n  variants: [{\n    id: \"satellite\",\n    name: \"Default\",\n    variantType: \"DEFAULT\",\n    description: \"\",\n    imageURL: \"\"\n  }]\n}, {\n  referenceStyleID: \"HYBRID\",\n  name: \"Hybrid\",\n  description: \"\",\n  variants: [{\n    id: \"hybrid\",\n    name: \"Default\",\n    variantType: \"DEFAULT\",\n    description: \"\",\n    imageURL: \"\"\n  }]\n}, {\n  referenceStyleID: \"BASIC\",\n  name: \"Basic\",\n  description: \"\",\n  variants: [{\n    id: \"basic-v2\",\n    name: \"Default\",\n    variantType: \"DEFAULT\",\n    description: \"\",\n    imageURL: \"\"\n  }, {\n    id: \"basic-v2-dark\",\n    name: \"Dark\",\n    variantType: \"DARK\",\n    description: \"\",\n    imageURL: \"\"\n  }, {\n    id: \"basic-v2-light\",\n    name: \"Light\",\n    variantType: \"LIGHT\",\n    description: \"\",\n    imageURL: \"\"\n  }]\n}, {\n  referenceStyleID: \"BRIGHT\",\n  name: \"Bright\",\n  description: \"\",\n  variants: [{\n    id: \"bright-v2\",\n    name: \"Default\",\n    variantType: \"DEFAULT\",\n    description: \"\",\n    imageURL: \"\"\n  }, {\n    id: \"bright-v2-dark\",\n    name: \"Dark\",\n    variantType: \"DARK\",\n    description: \"\",\n    imageURL: \"\"\n  }, {\n    id: \"bright-v2-light\",\n    name: \"Light\",\n    variantType: \"LIGHT\",\n    description: \"\",\n    imageURL: \"\"\n  }, {\n    id: \"bright-v2-pastel\",\n    name: \"Pastel\",\n    variantType: \"PASTEL\",\n    description: \"\",\n    imageURL: \"\"\n  }]\n}, {\n  referenceStyleID: \"OPENSTREETMAP\",\n  name: \"OpenStreetMap\",\n  description: \"\",\n  variants: [{\n    id: \"openstreetmap\",\n    name: \"Default\",\n    variantType: \"DEFAULT\",\n    description: \"\",\n    imageURL: \"\"\n  }]\n}, {\n  referenceStyleID: \"TOPO\",\n  name: \"Topo\",\n  description: \"\",\n  variants: [{\n    id: \"topo-v2\",\n    name: \"Default\",\n    variantType: \"DEFAULT\",\n    description: \"\",\n    imageURL: \"\"\n  }, {\n    id: \"topo-v2-dark\",\n    name: \"Dark\",\n    variantType: \"DARK\",\n    description: \"\",\n    imageURL: \"\"\n  }, {\n    id: \"topo-v2-shiny\",\n    name: \"Shiny\",\n    variantType: \"SHINY\",\n    description: \"\",\n    imageURL: \"\"\n  }, {\n    id: \"topo-v2-pastel\",\n    name: \"Pastel\",\n    variantType: \"PASTEL\",\n    description: \"\",\n    imageURL: \"\"\n  }, {\n    id: \"topo-v2-topographique\",\n    name: \"Topographique\",\n    variantType: \"TOPOGRAPHIQUE\",\n    description: \"\",\n    imageURL: \"\"\n  }]\n}, {\n  referenceStyleID: \"VOYAGER\",\n  name: \"Voyager\",\n  description: \"\",\n  variants: [{\n    id: \"voyager-v2\",\n    name: \"Default\",\n    variantType: \"DEFAULT\",\n    description: \"\",\n    imageURL: \"\"\n  }, {\n    id: \"voyager-v2-darkmatter\",\n    name: \"Darkmatter\",\n    variantType: \"DARK\",\n    description: \"\",\n    imageURL: \"\"\n  }, {\n    id: \"voyager-v2-positron\",\n    name: \"Positron\",\n    variantType: \"LIGHT\",\n    description: \"\",\n    imageURL: \"\"\n  }, {\n    id: \"voyager-v2-vintage\",\n    name: \"Vintage\",\n    variantType: \"VINTAGE\",\n    description: \"\",\n    imageURL: \"\"\n  }]\n}, {\n  referenceStyleID: \"TONER\",\n  name: \"Toner\",\n  description: \"\",\n  variants: [{\n    id: \"toner-v2\",\n    name: \"Default\",\n    variantType: \"DEFAULT\",\n    description: \"\",\n    imageURL: \"\"\n  }, {\n    id: \"toner-v2-background\",\n    name: \"Background\",\n    variantType: \"BACKGROUND\",\n    description: \"\",\n    imageURL: \"\"\n  }, {\n    id: \"toner-v2-lite\",\n    name: \"Lite\",\n    variantType: \"LITE\",\n    description: \"\",\n    imageURL: \"\"\n  }, {\n    id: \"toner-v2-lines\",\n    name: \"Lines\",\n    variantType: \"LINES\",\n    description: \"\",\n    imageURL: \"\"\n  }]\n}, {\n  referenceStyleID: \"DATAVIZ\",\n  name: \"Dataviz\",\n  description: \"\",\n  variants: [{\n    id: \"dataviz\",\n    name: \"Default\",\n    variantType: \"DEFAULT\",\n    description: \"\",\n    imageURL: \"\"\n  }, {\n    id: \"dataviz-dark\",\n    name: \"Dark\",\n    variantType: \"DARK\",\n    description: \"\",\n    imageURL: \"\"\n  }, {\n    id: \"dataviz-light\",\n    name: \"Light\",\n    variantType: \"LIGHT\",\n    description: \"\",\n    imageURL: \"\"\n  }]\n}, {\n  referenceStyleID: \"BACKDROP\",\n  name: \"Backdrop\",\n  description: \"\",\n  variants: [{\n    id: \"backdrop\",\n    name: \"Default\",\n    variantType: \"DEFAULT\",\n    description: \"\",\n    imageURL: \"\"\n  }, {\n    id: \"backdrop-dark\",\n    name: \"Dark\",\n    variantType: \"DARK\",\n    description: \"\",\n    imageURL: \"\"\n  }, {\n    id: \"backdrop-light\",\n    name: \"Light\",\n    variantType: \"LIGHT\",\n    description: \"\",\n    imageURL: \"\"\n  }]\n}, {\n  referenceStyleID: \"OCEAN\",\n  name: \"Ocean\",\n  description: \"\",\n  variants: [{\n    id: \"ocean\",\n    name: \"Default\",\n    variantType: \"DEFAULT\",\n    description: \"\",\n    imageURL: \"\"\n  }]\n}];\nfunction makeReferenceStyleProxy(referenceStyle) {\n  return new Proxy(referenceStyle, {\n    get(target, prop, receiver) {\n      if (target.hasVariant(prop)) {\n        return target.getVariant(prop);\n      }\n      if (prop.toString().toUpperCase() === prop) {\n        return referenceStyle.getDefaultVariant();\n      }\n      return Reflect.get(target, prop, receiver);\n    }\n  });\n}\nfunction buildMapStyles() {\n  const mapStyle = {};\n  for (let i = 0; i < mapStylePresetList.length; i += 1) {\n    const refStyleInfo = mapStylePresetList[i];\n    const refStyle = makeReferenceStyleProxy(new ReferenceMapStyle(refStyleInfo.name, refStyleInfo.referenceStyleID));\n    for (let j = 0; j < refStyleInfo.variants.length; j += 1) {\n      const variantInfo = refStyleInfo.variants[j];\n      const variant = new MapStyleVariant(variantInfo.name,\n      // name\n      variantInfo.variantType,\n      // variantType\n      variantInfo.id,\n      // id\n      refStyle,\n      // referenceStyle\n      variantInfo.description, variantInfo.imageURL\n      // imageURL\n      );\n      refStyle.addVariant(variant);\n    }\n    mapStyle[refStyleInfo.referenceStyleID] = refStyle;\n  }\n  return mapStyle;\n}\nfunction styleToStyle(style) {\n  if (!style) {\n    return MapStyle[mapStylePresetList[0].referenceStyleID].getDefaultVariant().getId();\n  }\n  if (typeof style === \"string\" || style instanceof String) {\n    return style.trim().toLowerCase();\n  }\n  if (style instanceof MapStyleVariant) {\n    return style.getId();\n  }\n  if (style instanceof ReferenceMapStyle) {\n    return style.getDefaultVariant().getId();\n  }\n}\nconst MapStyle = buildMapStyles();\nfunction extractLineStrings(geoJson) {\n  const lineStrings = [];\n  function extractFromGeometry(geometry) {\n    if (geometry.type === \"LineString\" || geometry.type === \"MultiLineString\") {\n      lineStrings.push(geometry);\n    }\n  }\n  function extractFromFeature(feature) {\n    if (feature.geometry) {\n      extractFromGeometry(feature.geometry);\n    }\n  }\n  function extractFromFeatureCollection(collection) {\n    for (const feature of collection.features) {\n      if (feature.type === \"Feature\") {\n        extractFromFeature(feature);\n      } else if (feature.type === \"FeatureCollection\") {\n        extractFromFeatureCollection(feature);\n      }\n    }\n  }\n  if (geoJson.type === \"Feature\") {\n    extractFromFeature(geoJson);\n  } else if (geoJson.type === \"FeatureCollection\") {\n    extractFromFeatureCollection(geoJson);\n  } else {\n    extractFromGeometry(geoJson);\n  }\n  return lineStrings;\n}\nfunction getSqSegDist(p, p1, p2) {\n  let x = p1[0],\n    y = p1[1],\n    dx = p2[0] - x,\n    dy = p2[1] - y;\n  if (dx !== 0 || dy !== 0) {\n    const t = ((p[0] - x) * dx + (p[1] - y) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      x = p2[0];\n      y = p2[1];\n    } else if (t > 0) {\n      x += dx * t;\n      y += dy * t;\n    }\n  }\n  dx = p[0] - x;\n  dy = p[1] - y;\n  return dx * dx + dy * dy;\n}\nfunction simplifyDPStep(points, first, last, sqTolerance, simplified) {\n  let maxSqDist = sqTolerance,\n    index;\n  for (let i = first + 1; i < last; i++) {\n    const sqDist = getSqSegDist(points[i], points[first], points[last]);\n    if (sqDist > maxSqDist) {\n      index = i;\n      maxSqDist = sqDist;\n    }\n  }\n  if (maxSqDist > sqTolerance) {\n    if (index - first > 1) {\n      simplifyDPStep(points, first, index, sqTolerance, simplified);\n    }\n    simplified.push(points[index]);\n    if (last - index > 1) {\n      simplifyDPStep(points, index, last, sqTolerance, simplified);\n    }\n  }\n}\nfunction simplifyDouglasPeucker(points, sqTolerance) {\n  const last = points.length - 1;\n  const simplified = [points[0]];\n  simplifyDPStep(points, 0, last, sqTolerance, simplified);\n  simplified.push(points[last]);\n  return simplified;\n}\nfunction simplify(points, tolerance) {\n  if (points.length <= 2) {\n    return points;\n  }\n  const sqTolerance = tolerance !== void 0 ? tolerance * tolerance : 1;\n  const simplePoints = simplifyDouglasPeucker(points, sqTolerance);\n  return simplePoints;\n}\nconst misc = {\n  extractLineStrings,\n  simplify\n};\nfunction staticMapMarkerToString(marker, includeColor = true) {\n  let str = `${marker[0]},${marker[1]}`;\n  if (marker.length === 3 && includeColor) {\n    str += `,${marker[2]}`;\n  }\n  return str;\n}\nfunction simplifyAndStringify(path, maxNbChar = 3e3) {\n  let str = path.map(point => point.join(\",\")).join(\"|\");\n  let tolerance = 5e-6;\n  const toleranceStep = 1e-5;\n  while (str.length > maxNbChar) {\n    const simplerPath = misc.simplify(path, tolerance);\n    str = simplerPath.map(point => `${point[0]},${point[1]}`).join(\"|\");\n    tolerance += toleranceStep;\n  }\n  return str;\n}\nfunction centered(center, zoom, options = {}) {\n  const style = styleToStyle(options.style);\n  const scale = options.hiDPI ? \"@2x\" : \"\";\n  const format = options.format ?? \"png\";\n  let width = ~~(options.width ?? 1024);\n  let height = ~~(options.height ?? 1024);\n  if (options.hiDPI) {\n    width = ~~(width / 2);\n    height = ~~(height / 2);\n  }\n  const endpoint = new URL(`maps/${encodeURIComponent(style)}/static/${center[0]},${center[1]},${zoom}/${width}x${height}${scale}.${format}`, defaults.maptilerApiURL);\n  if (\"attribution\" in options) {\n    endpoint.searchParams.set(\"attribution\", options.attribution.toString());\n  }\n  if (\"markers\" in options) {\n    let markerStr = \"\";\n    const hasIcon = \"markerIcon\" in options;\n    if (hasIcon) {\n      markerStr += `icon:${options.markerIcon}|`;\n    }\n    if (hasIcon && \"markerAnchor\" in options) {\n      markerStr += `anchor:${options.markerAnchor}|`;\n    }\n    if (hasIcon && options.hiDPI) {\n      markerStr += `scale:2|`;\n    }\n    const markerList = Array.isArray(options.markers[0]) ? options.markers : [options.markers];\n    markerStr += markerList.map(m => staticMapMarkerToString(m, !hasIcon)).join(\"|\");\n    endpoint.searchParams.set(\"markers\", markerStr);\n  }\n  if (\"path\" in options) {\n    let pathStr = \"\";\n    pathStr += `fill:${options.pathFillColor ?? \"none\"}|`;\n    if (\"pathStrokeColor\" in options) {\n      pathStr += `stroke:${options.pathStrokeColor}|`;\n    }\n    if (\"pathWidth\" in options) {\n      const pathWidth = options.pathWidth / (options.hiDPI ? 2 : 1);\n      pathStr += `width:${pathWidth.toString()}|`;\n    }\n    pathStr += simplifyAndStringify(options.path);\n    endpoint.searchParams.set(\"path\", pathStr);\n  }\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n  return endpoint.toString();\n}\nfunction bounded(boundingBox, options = {}) {\n  const style = styleToStyle(options.style);\n  const scale = options.hiDPI ? \"@2x\" : \"\";\n  const format = options.format ?? \"png\";\n  let width = ~~(options.width ?? 1024);\n  let height = ~~(options.height ?? 1024);\n  if (options.hiDPI) {\n    width = ~~(width / 2);\n    height = ~~(height / 2);\n  }\n  const endpoint = new URL(`maps/${encodeURIComponent(style)}/static/${boundingBox[0]},${boundingBox[1]},${boundingBox[2]},${boundingBox[3]}/${width}x${height}${scale}.${format}`, defaults.maptilerApiURL);\n  if (\"attribution\" in options) {\n    endpoint.searchParams.set(\"attribution\", options.attribution.toString());\n  }\n  if (\"padding\" in options) {\n    endpoint.searchParams.set(\"padding\", options.padding.toString());\n  }\n  if (\"markers\" in options) {\n    let markerStr = \"\";\n    const hasIcon = \"markerIcon\" in options;\n    if (hasIcon) {\n      markerStr += `icon:${options.markerIcon}|`;\n    }\n    if (hasIcon && \"markerAnchor\" in options) {\n      markerStr += `anchor:${options.markerAnchor}|`;\n    }\n    if (hasIcon && options.hiDPI) {\n      markerStr += `scale:2|`;\n    }\n    const markerList = Array.isArray(options.markers[0]) ? options.markers : [options.markers];\n    markerStr += markerList.map(m => staticMapMarkerToString(m, !hasIcon)).join(\"|\");\n    endpoint.searchParams.set(\"markers\", markerStr);\n  }\n  if (\"path\" in options) {\n    let pathStr = \"\";\n    pathStr += `fill:${options.pathFillColor ?? \"none\"}|`;\n    if (\"pathStrokeColor\" in options) {\n      pathStr += `stroke:${options.pathStrokeColor}|`;\n    }\n    if (\"pathWidth\" in options) {\n      const pathWidth = options.pathWidth / (options.hiDPI ? 2 : 1);\n      pathStr += `width:${pathWidth.toString()}|`;\n    }\n    pathStr += simplifyAndStringify(options.path);\n    endpoint.searchParams.set(\"path\", pathStr);\n  }\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n  return endpoint.toString();\n}\nfunction automatic(options = {}) {\n  if (!(\"markers\" in options) && !(\"path\" in options)) {\n    throw new Error(\"Automatic static maps require markers and/or path to be created.\");\n  }\n  const style = styleToStyle(options.style);\n  const scale = options.hiDPI ? \"@2x\" : \"\";\n  const format = options.format ?? \"png\";\n  let width = ~~(options.width ?? 1024);\n  let height = ~~(options.height ?? 1024);\n  if (options.hiDPI) {\n    width = ~~(width / 2);\n    height = ~~(height / 2);\n  }\n  const endpoint = new URL(`maps/${encodeURIComponent(style)}/static/auto/${width}x${height}${scale}.${format}`, defaults.maptilerApiURL);\n  if (\"attribution\" in options) {\n    endpoint.searchParams.set(\"attribution\", options.attribution.toString());\n  }\n  if (\"padding\" in options) {\n    endpoint.searchParams.set(\"padding\", options.padding.toString());\n  }\n  if (\"markers\" in options) {\n    let markerStr = \"\";\n    const hasIcon = \"markerIcon\" in options;\n    if (hasIcon) {\n      markerStr += `icon:${options.markerIcon}|`;\n    }\n    if (hasIcon && \"markerAnchor\" in options) {\n      markerStr += `anchor:${options.markerAnchor}|`;\n    }\n    if (hasIcon && options.hiDPI) {\n      markerStr += `scale:2|`;\n    }\n    const markerList = Array.isArray(options.markers[0]) ? options.markers : [options.markers];\n    markerStr += markerList.map(m => staticMapMarkerToString(m, !hasIcon)).join(\"|\");\n    endpoint.searchParams.set(\"markers\", markerStr);\n  }\n  if (\"path\" in options) {\n    let pathStr = \"\";\n    pathStr += `fill:${options.pathFillColor ?? \"none\"}|`;\n    if (\"pathStrokeColor\" in options) {\n      pathStr += `stroke:${options.pathStrokeColor}|`;\n    }\n    if (\"pathWidth\" in options) {\n      const pathWidth = options.pathWidth / (options.hiDPI ? 2 : 1);\n      pathStr += `width:${pathWidth.toString()}|`;\n    }\n    pathStr += simplifyAndStringify(options.path);\n    endpoint.searchParams.set(\"path\", pathStr);\n  }\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n  return endpoint.toString();\n}\nconst staticMaps = {\n  centered,\n  bounded,\n  automatic\n};\nconst EARTH_RADIUS = 63710088e-1;\nconst EARTH_CIRCUMFERENCE = 2 * Math.PI * EARTH_RADIUS;\nfunction longitudeToMercatorX(lng) {\n  return (180 + lng) / 360;\n}\nfunction latitudeToMercatorY(lat) {\n  return (180 - 180 / Math.PI * Math.log(Math.tan(Math.PI / 4 + lat * Math.PI / 360))) / 360;\n}\nfunction wgs84ToMercator(position) {\n  const wrappedPos = wrapWgs84(position);\n  return [longitudeToMercatorX(wrappedPos[0]), latitudeToMercatorY(wrappedPos[1])];\n}\nfunction mercatorXToLongitude(x) {\n  return x * 360 - 180;\n}\nfunction mercatorYToLatitude(y) {\n  const y2 = 180 - y * 360;\n  return 360 / Math.PI * Math.atan(Math.exp(y2 * Math.PI / 180)) - 90;\n}\nfunction mercatorToWgs84(position) {\n  return [mercatorXToLongitude(position[0]), mercatorYToLatitude(position[1])];\n}\nfunction haversineDistanceWgs84(from, to) {\n  const rad = Math.PI / 180;\n  const lat1 = from[1] * rad;\n  const lat2 = to[1] * rad;\n  const a = Math.sin(lat1) * Math.sin(lat2) + Math.cos(lat1) * Math.cos(lat2) * Math.cos((to[0] - from[0]) * rad);\n  const maxMeters = EARTH_RADIUS * Math.acos(Math.min(a, 1));\n  return maxMeters;\n}\nfunction haversineCumulatedDistanceWgs84(positions) {\n  const cumulatedDistance = Array(positions.length);\n  cumulatedDistance[0] = 0;\n  const l = cumulatedDistance.length;\n  for (let i = 1; i < l; i++) {\n    cumulatedDistance[i] = haversineDistanceWgs84(positions[i - 1], positions[i]) + cumulatedDistance[i - 1];\n  }\n  return cumulatedDistance;\n}\nfunction wrapWgs84(position) {\n  const lng = position[0];\n  const lat = position[1];\n  const d = 360;\n  const w = ((lng + 180) % d + d) % d - 180;\n  const wrapLong = w === -180 ? 180 : w;\n  return [wrapLong, lat];\n}\nfunction circumferenceAtLatitude(latitude) {\n  return EARTH_CIRCUMFERENCE * Math.cos(latitude * Math.PI / 180);\n}\nfunction mercatorToTileIndex(position, zoom, strict = true) {\n  const numberOfTilePerAxis = 2 ** zoom;\n  const fIndex = [position[0] * numberOfTilePerAxis, position[1] * numberOfTilePerAxis];\n  return strict ? [~~fIndex[0], ~~fIndex[1]] : fIndex;\n}\nfunction wgs84ToTileIndex(position, zoom, strict = true) {\n  const merc = wgs84ToMercator(position);\n  return mercatorToTileIndex(merc, zoom, strict);\n}\nfunction toRadians(degrees) {\n  return degrees * Math.PI / 180;\n}\nfunction toDegrees(radians) {\n  return radians * 180 / Math.PI;\n}\nfunction haversineIntermediateWgs84(pos1, pos2, ratio) {\n  const d = haversineDistanceWgs84(pos1, pos2);\n  const λ1 = toRadians(pos1[0]);\n  const φ1 = toRadians(pos1[1]);\n  const λ2 = toRadians(pos2[0]);\n  const φ2 = toRadians(pos2[1]);\n  const δ = d / EARTH_RADIUS;\n  const a = Math.sin((1 - ratio) * δ) / Math.sin(δ);\n  const b = Math.sin(ratio * δ) / Math.sin(δ);\n  const x = a * Math.cos(φ1) * Math.cos(λ1) + b * Math.cos(φ2) * Math.cos(λ2);\n  const y = a * Math.cos(φ1) * Math.sin(λ1) + b * Math.cos(φ2) * Math.sin(λ2);\n  const z = a * Math.sin(φ1) + b * Math.sin(φ2);\n  const φ3 = Math.atan2(z, Math.sqrt(x * x + y * y));\n  const λ3 = Math.atan2(y, x);\n  return [toDegrees(λ3), toDegrees(φ3)];\n}\nconst math = {\n  EARTH_RADIUS,\n  EARTH_CIRCUMFERENCE,\n  longitudeToMercatorX,\n  latitudeToMercatorY,\n  wgs84ToMercator,\n  mercatorXToLongitude,\n  mercatorYToLatitude,\n  mercatorToWgs84,\n  haversineDistanceWgs84,\n  wrapWgs84,\n  circumferenceAtLatitude,\n  mercatorToTileIndex,\n  wgs84ToTileIndex,\n  toRadians,\n  toDegrees,\n  haversineIntermediateWgs84,\n  haversineCumulatedDistanceWgs84\n};\nlet tileCache = null;\nfunction getTileCache() {\n  if (!tileCache) {\n    tileCache = new QuickLRU({\n      maxSize: config.tileCacheSize\n    });\n  }\n  return tileCache;\n}\nasync function bufferToPixelDataBrowser(buff) {\n  const blob = new Blob([buff]);\n  const imageBitmap = await createImageBitmap(blob);\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n  canvas.width = imageBitmap.width;\n  canvas.height = imageBitmap.height;\n  ctx.drawImage(imageBitmap, 0, 0);\n  const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  return {\n    pixels: imageData.data,\n    width: canvas.width,\n    height: canvas.height,\n    components: imageData.data.length / (canvas.width * canvas.height)\n  };\n}\nfunction getBufferToPixelDataParser() {\n  if (config.bufferToPixelData) {\n    return config.bufferToPixelData;\n  }\n  if (typeof window !== \"undefined\") {\n    return bufferToPixelDataBrowser;\n  }\n  throw new Error(\"An image file buffer to pixel data parser is necessary. Specify it in `config.bufferToPixelData`\");\n}\nconst terrainTileJsonURL = \"tiles/terrain-rgb-v2/tiles.json\";\nlet terrainTileJson = null;\nconst customMessages = {\n  403: \"Key is missing, invalid or restricted\"\n};\nasync function fetchTerrainTileJson(apiKey) {\n  const endpoint = new URL(terrainTileJsonURL, defaults.maptilerApiURL);\n  endpoint.searchParams.set(\"key\", apiKey);\n  const urlWithParams = endpoint.toString();\n  const res = await callFetch(urlWithParams);\n  if (res.ok) {\n    terrainTileJson = await res.json();\n    return terrainTileJson;\n  } else {\n    if (!res.ok) {\n      throw new ServiceError(res, customMessages[res.status] ?? \"\");\n    }\n  }\n}\nasync function at(position, options = {}) {\n  const apiKey = options.apiKey ?? config.apiKey;\n  if (!terrainTileJson) {\n    await fetchTerrainTileJson(apiKey);\n  }\n  const maxZoom = terrainTileJson.maxzoom;\n  let zoom = ~~(options.zoom ?? maxZoom);\n  if (zoom > maxZoom || zoom < 0) {\n    zoom = maxZoom;\n  }\n  const tileIndex = math.wgs84ToTileIndex(position, zoom, false);\n  const tileX = ~~tileIndex[0];\n  const tileY = ~~tileIndex[1];\n  if (!terrainTileJson.tiles.length) {\n    throw new Error(\"Terrain tileJSON tile list is empty.\");\n  }\n  const tileID = `terrain_${zoom.toString()}_${tileX.toString()}_${tileY.toString()}`;\n  let tilePixelData;\n  const cache = getTileCache();\n  if (cache.has(tileID)) {\n    tilePixelData = cache.get(tileID);\n  } else {\n    const tileURL = terrainTileJson.tiles[0].replace(\"{x}\", tileX.toString()).replace(\"{y}\", tileY.toString()).replace(\"{z}\", zoom.toString());\n    const tileRes = await callFetch(tileURL);\n    if (!tileRes.ok) {\n      throw new ServiceError(tileRes, customMessages[tileRes.status] ?? \"\");\n    }\n    const tileBuff = await tileRes.arrayBuffer();\n    const tileParser = getBufferToPixelDataParser();\n    tilePixelData = await tileParser(tileBuff);\n    cache.set(tileID, tilePixelData);\n  }\n  const pixelX = ~~(tilePixelData.width * (tileIndex[0] % 1));\n  const pixelY = ~~(tilePixelData.height * (tileIndex[1] % 1));\n  const pixelDataIndex = (pixelY * tilePixelData.width + pixelX) * tilePixelData.components;\n  const R = tilePixelData.pixels[pixelDataIndex];\n  const G = tilePixelData.pixels[pixelDataIndex + 1];\n  const B = tilePixelData.pixels[pixelDataIndex + 2];\n  const elevation2 = -1e4 + (R * 256 * 256 + G * 256 + B) * 0.1;\n  return [position[0], position[1], elevation2];\n}\nasync function batch(positions, options = {}) {\n  const apiKey = options.apiKey ?? config.apiKey;\n  if (!terrainTileJson) {\n    await fetchTerrainTileJson(apiKey);\n  }\n  const tileParser = getBufferToPixelDataParser();\n  const tileURLSchema = terrainTileJson.tiles[0];\n  const cache = getTileCache();\n  const maxZoom = terrainTileJson.maxzoom;\n  let zoom = ~~(options.zoom ?? maxZoom);\n  if (zoom > maxZoom || zoom < 0) {\n    zoom = maxZoom;\n  }\n  const tileIndicesFloats = positions.map(position => math.wgs84ToTileIndex(position, zoom, false));\n  const tileIndicesInteger = tileIndicesFloats.map(index => [~~index[0], ~~index[1]]);\n  const tileIDs = tileIndicesInteger.map(index => `terrain_${zoom.toString()}_${index[0].toString()}_${index[1].toString()}`);\n  const uniqueTilesToFetch = Array.from(new Set(tileIDs.filter(tileID => !cache.has(tileID)))).map(tileID => tileID.split(\"_\").slice(1));\n  const tileURLs = uniqueTilesToFetch.map(zxy => tileURLSchema.replace(\"{x}\", zxy[1].toString()).replace(\"{y}\", zxy[2].toString()).replace(\"{z}\", zxy[0].toString()));\n  const promisesFetchTiles = tileURLs.map(url => callFetch(url));\n  const resTiles = await Promise.allSettled(promisesFetchTiles);\n  const fulfilledRes = resTiles.map(el => el.status === \"fulfilled\" ? el.value : null).filter(res => res);\n  const fulfilledRButNotOkRes = fulfilledRes.filter(res => !res.ok);\n  if (fulfilledRes.length !== promisesFetchTiles.length) {\n    throw new Error(\"Some tiles could not be fetched.\");\n  }\n  if (fulfilledRButNotOkRes.length) {\n    throw new ServiceError(fulfilledRButNotOkRes[0], customMessages[fulfilledRButNotOkRes[0].status] ?? \"\");\n  }\n  const tileArrayBuffers = await Promise.all(fulfilledRes.map(res => res.arrayBuffer()));\n  if (!tileArrayBuffers.every(buff => buff.byteLength > 0)) {\n    throw new Error(\"Some tiles are not available.\");\n  }\n  const tilePixelDatas = await Promise.all(tileArrayBuffers.map(buff => tileParser(buff)));\n  tilePixelDatas.forEach((tilePixelData, i) => {\n    const zxy = uniqueTilesToFetch[i];\n    const tileID = `terrain_${zxy[0].toString()}_${zxy[1].toString()}_${zxy[2].toString()}`;\n    cache.set(tileID, tilePixelData);\n  });\n  const elevatedPositions = positions.map((position, i) => {\n    const tileID = tileIDs[i];\n    const tileIndexFloat = tileIndicesFloats[i];\n    const tilePixelData = cache.get(tileID);\n    const pixelX = Math.min(Math.round(tilePixelData.width * (tileIndexFloat[0] % 1)), tilePixelData.width - 1);\n    const pixelY = Math.min(Math.round(tilePixelData.height * (tileIndexFloat[1] % 1)), tilePixelData.height - 1);\n    const pixelDataIndex = (pixelY * tilePixelData.width + pixelX) * tilePixelData.components;\n    const R = tilePixelData.pixels[pixelDataIndex];\n    const G = tilePixelData.pixels[pixelDataIndex + 1];\n    const B = tilePixelData.pixels[pixelDataIndex + 2];\n    const elevation2 = -1e4 + (R * 256 * 256 + G * 256 + B) * 0.1;\n    return [position[0], position[1], ~~(elevation2 * 1e3) / 1e3];\n  });\n  if (options.smoothingKernelSize) {\n    const kernelSize = ~~(options.smoothingKernelSize / 2) * 2 + 1;\n    const elevations = elevatedPositions.map(pos => pos[2]);\n    const kernelSpan = ~~(kernelSize / 2);\n    for (let i = kernelSpan; i < elevations.length - kernelSpan - 1; i += 1) {\n      let sum = 0;\n      for (let j = 0; j < kernelSize; j += 1) {\n        const elev = elevations[i - kernelSpan + j];\n        sum += elev;\n      }\n      sum /= kernelSize;\n      elevatedPositions[i][2] = sum;\n    }\n  }\n  return elevatedPositions;\n}\nasync function fromLineString(ls, options = {}) {\n  if (ls.type !== \"LineString\") {\n    throw new Error(\"The provided object is not a GeoJSON LineString\");\n  }\n  const clone = structuredClone(ls);\n  const elevatedPositions = await batch(clone.coordinates, options);\n  clone.coordinates = elevatedPositions;\n  return clone;\n}\nasync function fromMultiLineString(ls, options = {}) {\n  if (ls.type !== \"MultiLineString\") {\n    throw new Error(\"The provided object is not a GeoJSON MultiLineString\");\n  }\n  const clone = structuredClone(ls);\n  const multiLengths = clone.coordinates.map(poss => poss.length);\n  const flattenPositions = clone.coordinates.flat();\n  const flattenPositionsElevated = await batch(flattenPositions, options);\n  const result = [];\n  let index = 0;\n  for (const length of multiLengths) {\n    result.push(flattenPositionsElevated.slice(index, index + length));\n    index += length;\n  }\n  clone.coordinates = result;\n  return clone;\n}\nconst elevation = {\n  at,\n  batch,\n  fromLineString,\n  fromMultiLineString\n};\nexport { ClientConfig, LanguageGeocoding, MapStyle, MapStyleVariant, ReferenceMapStyle, ServiceError, bufferToPixelDataBrowser, circumferenceAtLatitude, config, coordinates, data, elevation, expandMapStyle, geocoding, geolocation, getAutoLanguageGeocoding, getBufferToPixelDataParser, getTileCache, mapStylePresetList, math, misc, staticMaps, styleToStyle };","map":{"version":3,"names":["tryGettingFetch","self","fetch","bind","global","ClientConfig","constructor","_apiKey","_fetch","tileCacheSize","apiKey","k","f","config","LanguageGeocoding","AUTO","ALBANIAN","ARABIC","ARMENIAN","AZERBAIJANI","BELORUSSIAN","BOSNIAN","BRETON","BULGARIAN","CATALAN","CHINESE","CROATIAN","CZECH","DANISH","DUTCH","ENGLISH","ESPERANTO","ESTONIAN","FINNISH","FRENCH","FRISIAN","GEORGIAN","GERMAN","GREEK","HEBREW","HUNGARIAN","ICELANDIC","IRISH","ITALIAN","JAPANESE","KANNADA","KAZAKH","KOREAN","ROMAN_LATIN","LATVIAN","LITHUANIAN","LUXEMBOURGISH","MACEDONIAN","MALTESE","NORWEGIAN","POLISH","PORTUGUESE","ROMANIAN","ROMANSH","RUSSIAN","SCOTTISH_GAELIC","SERBIAN_CYRILLIC","SLOVAK","SLOVENE","SPANISH","SWEDISH","THAI","TURKISH","UKRAINIAN","WELSH","languageCodeSet","Set","Object","values","getAutoLanguageGeocoding","navigator","Intl","DateTimeFormat","resolvedOptions","locale","split","canditatelangs","Array","from","languages","map","l","filter","has","length","callFetch","resource","options","Error","URL","searchParams","get","trim","defaults","maptilerApiURL","mapStyle","freeze","ServiceError","res","customMessage","url","status","customMessages$4","addLanguageGeocodingOptions","language","isArray","lang","join","set","addCommonForwardAndReverseGeocodingOptions","limit","types","excludeTypes","String","addForwardGeocodingOptions","bbox","proximity","country","fuzzyMatch","autocomplete","forward","query","endpoint","encodeURIComponent","urlWithParams","toString","ok","obj","json","reverse","position","byId","id","batch$1","batch","queries","joinedQuery","geocoding","customMessages$3","info","geolocation","customMessages$2","search","transformations","exports","transform","positions","coordinatesStr","coord","sourceCrs","targetCrs","operations","coordinates","customMessages$1","dataId","data","expandMapStyle","style","maptilerDomainRegex","match","trimmed","expandedStyle","startsWith","exec","MapStyleVariant","name","variantType","referenceStyle","description","imageURL","getName","getFullName","getType","getId","getDescription","getReferenceStyle","hasVariant","getVariant","getVariants","v","getImageURL","getExpandedStyleURL","ReferenceMapStyle","variants","orderedVariants","addVariant","push","getDefaultVariant","mapStylePresetList","referenceStyleID","makeReferenceStyleProxy","Proxy","target","prop","receiver","toUpperCase","Reflect","buildMapStyles","i","refStyleInfo","refStyle","j","variantInfo","variant","styleToStyle","MapStyle","toLowerCase","extractLineStrings","geoJson","lineStrings","extractFromGeometry","geometry","type","extractFromFeature","feature","extractFromFeatureCollection","collection","features","getSqSegDist","p","p1","p2","x","y","dx","dy","t","simplifyDPStep","points","first","last","sqTolerance","simplified","maxSqDist","index","sqDist","simplifyDouglasPeucker","simplify","tolerance","simplePoints","misc","staticMapMarkerToString","marker","includeColor","str","simplifyAndStringify","path","maxNbChar","point","toleranceStep","simplerPath","centered","center","zoom","scale","hiDPI","format","width","height","attribution","markerStr","hasIcon","markerIcon","markerAnchor","markerList","markers","m","pathStr","pathFillColor","pathStrokeColor","pathWidth","bounded","boundingBox","padding","automatic","staticMaps","EARTH_RADIUS","EARTH_CIRCUMFERENCE","Math","PI","longitudeToMercatorX","lng","latitudeToMercatorY","lat","log","tan","wgs84ToMercator","wrappedPos","wrapWgs84","mercatorXToLongitude","mercatorYToLatitude","y2","atan","exp","mercatorToWgs84","haversineDistanceWgs84","to","rad","lat1","lat2","a","sin","cos","maxMeters","acos","min","haversineCumulatedDistanceWgs84","cumulatedDistance","d","w","wrapLong","circumferenceAtLatitude","latitude","mercatorToTileIndex","strict","numberOfTilePerAxis","fIndex","wgs84ToTileIndex","merc","toRadians","degrees","toDegrees","radians","haversineIntermediateWgs84","pos1","pos2","ratio","λ1","φ1","λ2","φ2","δ","b","z","φ3","atan2","sqrt","λ3","math","tileCache","getTileCache","QuickLRU","maxSize","bufferToPixelDataBrowser","buff","blob","Blob","imageBitmap","createImageBitmap","canvas","document","createElement","ctx","getContext","drawImage","imageData","getImageData","pixels","components","getBufferToPixelDataParser","bufferToPixelData","window","terrainTileJsonURL","terrainTileJson","customMessages","fetchTerrainTileJson","at","maxZoom","maxzoom","tileIndex","tileX","tileY","tiles","tileID","tilePixelData","cache","tileURL","replace","tileRes","tileBuff","arrayBuffer","tileParser","pixelX","pixelY","pixelDataIndex","R","G","B","elevation2","tileURLSchema","tileIndicesFloats","tileIndicesInteger","tileIDs","uniqueTilesToFetch","slice","tileURLs","zxy","promisesFetchTiles","resTiles","Promise","allSettled","fulfilledRes","el","value","fulfilledRButNotOkRes","tileArrayBuffers","all","every","byteLength","tilePixelDatas","forEach","elevatedPositions","tileIndexFloat","round","smoothingKernelSize","kernelSize","elevations","pos","kernelSpan","sum","elev","fromLineString","ls","clone","structuredClone","fromMultiLineString","multiLengths","poss","flattenPositions","flat","flattenPositionsElevated","result","elevation"],"sources":["/Users/vinaykamisettymuni/Documents/GitHub/Tinoto/client/node_modules/@maptiler/client/src/config.ts","/Users/vinaykamisettymuni/Documents/GitHub/Tinoto/client/node_modules/@maptiler/client/src/language.ts","/Users/vinaykamisettymuni/Documents/GitHub/Tinoto/client/node_modules/@maptiler/client/src/callFetch.ts","/Users/vinaykamisettymuni/Documents/GitHub/Tinoto/client/node_modules/@maptiler/client/src/defaults.ts","/Users/vinaykamisettymuni/Documents/GitHub/Tinoto/client/node_modules/@maptiler/client/src/services/ServiceError.ts","/Users/vinaykamisettymuni/Documents/GitHub/Tinoto/client/node_modules/@maptiler/client/src/services/geocoding.ts","/Users/vinaykamisettymuni/Documents/GitHub/Tinoto/client/node_modules/@maptiler/client/src/services/geolocation.ts","/Users/vinaykamisettymuni/Documents/GitHub/Tinoto/client/node_modules/@maptiler/client/src/services/coordinates.ts","/Users/vinaykamisettymuni/Documents/GitHub/Tinoto/client/node_modules/@maptiler/client/src/services/data.ts","/Users/vinaykamisettymuni/Documents/GitHub/Tinoto/client/node_modules/@maptiler/client/src/mapstyle.ts","/Users/vinaykamisettymuni/Documents/GitHub/Tinoto/client/node_modules/@maptiler/client/src/misc.ts","/Users/vinaykamisettymuni/Documents/GitHub/Tinoto/client/node_modules/@maptiler/client/src/services/staticMaps.ts","/Users/vinaykamisettymuni/Documents/GitHub/Tinoto/client/node_modules/@maptiler/client/src/services/math.ts","/Users/vinaykamisettymuni/Documents/GitHub/Tinoto/client/node_modules/@maptiler/client/src/tiledecoding.ts","/Users/vinaykamisettymuni/Documents/GitHub/Tinoto/client/node_modules/@maptiler/client/src/services/elevation.ts"],"sourcesContent":["import { BufferToPixelDataFunction } from \"./tiledecoding\";\n\nexport type FetchFunction = (\n  input: RequestInfo | URL,\n  init?: RequestInit,\n) => Promise<Response>;\n\nfunction tryGettingFetch() {\n  // this is browser, fetch exists\n  if (typeof self !== \"undefined\") {\n    return fetch.bind(self);\n  }\n\n  if (typeof global !== \"undefined\" && global.fetch) {\n    return global.fetch;\n  }\n\n  return null;\n}\n\n/**\n * The configuration object definition\n */\nclass ClientConfig {\n  /**\n   * MapTiler Cloud API key\n   */\n  private _apiKey = \"\";\n\n  /**\n   * The fetch function. To be set if in Node < 18, otherwise\n   * will be automatically resolved.\n   */\n  private _fetch: FetchFunction | null = tryGettingFetch();\n\n  /**\n   * Number of tiles to keep in cache\n   */\n  public tileCacheSize: number = 200;\n\n  public bufferToPixelData: BufferToPixelDataFunction | null;\n\n  /**\n   * Set the MapTiler Cloud API key\n   */\n  set apiKey(k: string) {\n    this._apiKey = k;\n  }\n\n  /**\n   * Get the MapTiler Cloud API key\n   */\n  get apiKey(): string {\n    return this._apiKey;\n  }\n\n  /**\n   * Set a the custom fetch function to replace the default one\n   */\n  set fetch(f: FetchFunction) {\n    this._fetch = f;\n  }\n\n  /**\n   * Get the fetch fucntion\n   */\n  get fetch(): FetchFunction | null {\n    return this._fetch;\n  }\n}\n\n/**\n * Configuration object\n */\nconst config = new ClientConfig();\n\nexport { ClientConfig, config };\n","/**\n * Languages. Note that not all the languages of this list are available but the compatibility list may be expanded in the future.\n */\nconst LanguageGeocoding = {\n  AUTO: \"auto\",\n  ALBANIAN: \"sq\",\n  ARABIC: \"ar\",\n  ARMENIAN: \"hy\",\n  AZERBAIJANI: \"az\",\n  BELORUSSIAN: \"be\",\n  BOSNIAN: \"bs\",\n  BRETON: \"br\",\n  BULGARIAN: \"bg\",\n  CATALAN: \"ca\",\n  CHINESE: \"zh\",\n  CROATIAN: \"hr\",\n  CZECH: \"cs\",\n  DANISH: \"da\",\n  DUTCH: \"nl\",\n  ENGLISH: \"en\",\n  ESPERANTO: \"eo\",\n  ESTONIAN: \"et\",\n  FINNISH: \"fi\",\n  FRENCH: \"fr\",\n  FRISIAN: \"fy\",\n  GEORGIAN: \"ka\",\n  GERMAN: \"de\",\n  GREEK: \"el\",\n  HEBREW: \"he\",\n  HUNGARIAN: \"hu\",\n  ICELANDIC: \"is\",\n  IRISH: \"ga\",\n  ITALIAN: \"it\",\n  JAPANESE: \"ja\",\n  KANNADA: \"kn\",\n  KAZAKH: \"kk\",\n  KOREAN: \"ko\",\n  ROMAN_LATIN: \"la\",\n  LATVIAN: \"lv\",\n  LITHUANIAN: \"lt\",\n  LUXEMBOURGISH: \"lb\",\n  MACEDONIAN: \"mk\",\n  MALTESE: \"mt\",\n  NORWEGIAN: \"no\",\n  POLISH: \"pl\",\n  PORTUGUESE: \"pt\",\n  ROMANIAN: \"ro\",\n  ROMANSH: \"rm\",\n  RUSSIAN: \"ru\",\n  SCOTTISH_GAELIC: \"gd\",\n  SERBIAN_CYRILLIC: \"sr\",\n  SLOVAK: \"sk\",\n  SLOVENE: \"sl\",\n  SPANISH: \"es\",\n  SWEDISH: \"sv\",\n  THAI: \"th\",\n  TURKISH: \"tr\",\n  UKRAINIAN: \"uk\",\n  WELSH: \"cy\",\n};\n\nconst languageCodeSet = new Set(Object.values(LanguageGeocoding));\n\ntype Values<T> = T[keyof T];\n\n/**\n * Built-in languages values as strings\n */\ntype LanguageGeocodingString = Values<typeof LanguageGeocoding>;\n\nfunction getAutoLanguageGeocoding(): LanguageGeocodingString {\n  if (typeof navigator === \"undefined\") {\n    return Intl.DateTimeFormat()\n      .resolvedOptions()\n      .locale.split(\"-\")[0] as LanguageGeocodingString;\n  }\n\n  const canditatelangs = Array.from(\n    new Set(navigator.languages.map((l) => l.split(\"-\")[0])),\n  ).filter((l) => languageCodeSet.has(l as LanguageGeocodingString));\n\n  return canditatelangs.length\n    ? (canditatelangs[0] as LanguageGeocodingString)\n    : LanguageGeocoding.ENGLISH;\n}\n\nexport { LanguageGeocoding, LanguageGeocodingString, getAutoLanguageGeocoding };\n","import { config } from \"./config\";\n\nexport async function callFetch(resource, options = {}) {\n  if (config.fetch === null) {\n    throw new Error(\n      \"The fetch function was not found. If on NodeJS < 18 please specify the fetch function with config.fetch\",\n    );\n  }\n\n  //  Control if URL contains the api key\n  if (new URL(resource).searchParams.get(\"key\").trim() === \"\") {\n    throw new Error(\n      \"The MapTiler Cloud API key is missing. Set it in `config.apiKey` or get one for free at https://maptiler.com\",\n    );\n  }\n\n  return config.fetch(resource, options);\n}\n","/**\n * Some default settings for the SDK\n */\nconst defaults = {\n  maptilerApiURL: \"https://api.maptiler.com/\",\n  mapStyle: \"streets-v2\",\n};\n\nObject.freeze(defaults);\n\nexport { defaults };\n","/**\n * A ServiceError is an Error that includes the HTTP response details\n */\nexport class ServiceError extends Error {\n  constructor(\n    public res: Response,\n    customMessage = \"\",\n  ) {\n    super(\n      `Call to enpoint ${res.url} failed with the status code ${res.status}. ${customMessage}`,\n    );\n  }\n}\n","import { BBox, Feature, Geometry, Position } from \"geojson\";\nimport { callFetch } from \"../callFetch\";\nimport { config } from \"../config\";\nimport { defaults } from \"../defaults\";\n\nimport {\n  getAutoLanguageGeocoding,\n  LanguageGeocoding,\n  LanguageGeocodingString,\n} from \"../language\";\nimport { ServiceError } from \"./ServiceError\";\n\nconst customMessages = {\n  400: \"Query too long / Invalid parameters\",\n  403: \"Key is missing, invalid or restricted\",\n};\n\nexport type LanguageGeocodingOptions = {\n  /**\n   * Prefer results in specific language. It’s possible to specify multiple values.\n   */\n  language?: LanguageGeocodingString | Array<LanguageGeocodingString>;\n};\n\nexport type CommonForwardAndReverseGeocodingOptions =\n  LanguageGeocodingOptions & {\n    /**\n     * Custom MapTiler Cloud API key to use instead of the one in global `config`\n     */\n    apiKey?: string;\n\n    /**\n     * Maximum number of results to show. Must be between 1 and 10. Default is 5 for forward and 1 for reverse geocoding.\n     */\n    limit?: number;\n\n    /**\n     * Filter of feature types to return.\n     * If not specified, feature of all available types except `poi` are returned (`types = [\"poi\"]`, `excludeTypes = true`).\n     */\n    types?: (\n      | \"country\"\n      | \"region\"\n      | \"subregion\"\n      | \"county\"\n      | \"joint_municipality\"\n      | \"joint_submunicipality\"\n      | \"municipality\"\n      | \"municipal_district\"\n      | \"locality\"\n      | \"neighbourhood\"\n      | \"place\"\n      | \"postal_code\"\n      | \"address\"\n      | \"poi\"\n    )[];\n\n    /**\n     * Set to `true` to use all available feature types except those mentioned in `types`. Default value is `false` if `types` is specified.\n     */\n    excludeTypes?: boolean;\n  };\n\nexport type GeocodingOptions = CommonForwardAndReverseGeocodingOptions & {\n  /**\n   * Only search for results in the specified area.\n   */\n  bbox?: BBox;\n\n  /**\n   * Prefer results close to a specific location.\n   */\n  proximity?: Position | \"ip\";\n\n  /**\n   * Limit search to specific country/countries specified as list of Alpha-2 ISO 3166-1 codes.\n   */\n  country?: string[];\n\n  /**\n   * Set to `false` to disable fuzzy (typo-tolerant) search. Default is `true`.\n   */\n  fuzzyMatch?: boolean;\n\n  /**\n   * Set to `true` to use autocomplete, `false` to disable it. Default is `true`.\n   */\n  autocomplete?: boolean;\n};\n\nexport type ReverseGeocodingOptions = CommonForwardAndReverseGeocodingOptions;\n\nexport type ByIdGeocodingOptions = LanguageGeocodingOptions & {\n  apiKey?: string;\n};\n\nexport type Coordinates = Position;\n\ntype FeatureProperties = {\n  /**\n   * External reference of the feature used for debugging purposes\n   */\n  ref: string;\n\n  /**\n   * ISO 3166-1 alpha-2 country code of the feature\n   */\n  country_code: string;\n\n  /**\n   * (experimental) Kind of the feature\n   */\n  kind?:\n    | \"road\"\n    | \"road_relation\"\n    | \"admin_area\"\n    | \"place\"\n    | \"street\"\n    | \"virtual_street\";\n\n  /**\n   * (experimental) Value of place=* tag from OpenStreetMap feature if kind=place\n   */\n  \"osm:place_type\"?: string;\n\n  /**\n   * (experimental) Feature tags from OpenStreetMap. Only available for `poi` type.\n   */\n  \"osm:tags\"?: Record<string, string>;\n\n  /**\n   * Array of POI categories. Only available for `poi` type.\n   */\n  categories?: string[];\n\n  /**\n   * Wikidata identifier.\n   */\n  wikidata?: string;\n};\n\ntype FeatureBase = {\n  /**\n   * Unique feature ID\n   */\n  id: string;\n\n  /**\n   * Localized feature name\n   */\n  text: string;\n\n  /**\n   * Query's primary ISO 639-1 language code\n   */\n  language?: string;\n\n  /**\n   * A string analogous to the `text` field that matches the query in the requested language.\n   * This field is only returned when multiple languages are requested using the `language` parameter, and will be present for each requested language.\n   */\n  [text: `text_${string}`]: string;\n\n  /**\n   * A ISO 639-1 query's fallback language code.\n   * This field is only returned when multiple languages are requested using the `language` parameter, and will be present for each requested language.\n   */\n  [language: `language_${string}`]: string;\n};\n\nexport type FeatureHierarchy = FeatureProperties & FeatureBase;\n\nexport type GeocodingFeature = Feature<Geometry, FeatureProperties> &\n  FeatureBase & {\n    /**\n     * Bounding box of the original feature as [w, s, e, n] array\n     */\n    bbox: BBox;\n\n    /**\n     * A [lon, lat] array of the original feature centeroid\n     */\n    center: Coordinates;\n\n    /**\n     * Formatted (including the hierarchy) and localized feature full name\n     */\n    place_name: string;\n\n    /**\n     * A string analogous to the `place_name` field that matches the query in the requested language.\n     * This field is only returned when multiple languages are requested using the `language` parameter, and will be present for each requested language.\n     */\n    [key: `place_name_${string}`]: string;\n\n    /**\n     * An array of feature types describing the feature.\n     * Currently each feature has only single type but this may change in the future.\n     */\n    place_type: string[];\n\n    /**\n     * Localized type of the place name, matches `place_type` property\n     */\n    place_type_name: string[];\n\n    /**\n     * Feature hierarchy\n     */\n    context?: Array<FeatureHierarchy>;\n\n    /**\n     * Address number, if applicable\n     */\n    address?: string;\n\n    /**\n     * Indicates how well the returned feature matches the user's query on a scale from 0 to 1.\n     * 0 means the result does not match the query text at all, while 1 means the result fully matches the query text.\n     * You can use the relevance property to remove results that don't fully match the query.\n     */\n    relevance: number;\n  };\n\nexport type GeocodingSearchResult = {\n  type: \"FeatureCollection\";\n\n  /**\n   * Array of features found\n   */\n  features: Array<GeocodingFeature>;\n\n  /**\n   * Tokenized search query\n   */\n  query: Array<string>;\n\n  /**\n   * Attribution of the result\n   */\n  attribution: string;\n};\n\nfunction addLanguageGeocodingOptions(\n  searchParams: URLSearchParams,\n  options: LanguageGeocodingOptions,\n) {\n  const { language } = options;\n\n  if (language == undefined) {\n    return;\n  }\n\n  const languages = Array.from(\n    new Set(\n      (Array.isArray(language) ? language : [language]).map((lang) =>\n        lang === LanguageGeocoding.AUTO ? getAutoLanguageGeocoding() : lang,\n      ),\n    ),\n  ).join(\",\");\n\n  searchParams.set(\"language\", languages);\n}\n\nfunction addCommonForwardAndReverseGeocodingOptions(\n  searchParams: URLSearchParams,\n  options: CommonForwardAndReverseGeocodingOptions,\n) {\n  const { apiKey, limit, types, excludeTypes } = options;\n\n  searchParams.set(\"key\", apiKey ?? config.apiKey);\n\n  if (limit != undefined) {\n    searchParams.set(\"limit\", String(limit));\n  }\n\n  if (types != undefined) {\n    searchParams.set(\"types\", types.join(\",\"));\n  }\n\n  if (excludeTypes != undefined) {\n    searchParams.set(\"excludeTypes\", String(excludeTypes));\n  }\n\n  addLanguageGeocodingOptions(searchParams, options);\n}\n\nfunction addForwardGeocodingOptions(\n  searchParams: URLSearchParams,\n  options: GeocodingOptions,\n) {\n  addCommonForwardAndReverseGeocodingOptions(searchParams, options);\n\n  const { bbox, proximity, country, fuzzyMatch, autocomplete } = options;\n\n  if (bbox != undefined) {\n    searchParams.set(\"bbox\", bbox.join(\",\"));\n  }\n\n  if (proximity != undefined) {\n    searchParams.set(\n      \"proximity\",\n      proximity === \"ip\" ? proximity : proximity.join(\",\"),\n    );\n  }\n\n  if (country != undefined) {\n    searchParams.set(\"country\", country.join(\",\"));\n  }\n\n  if (fuzzyMatch != undefined) {\n    searchParams.set(\"fuzzyMatch\", fuzzyMatch ? \"true\" : \"false\");\n  }\n\n  if (autocomplete != undefined) {\n    searchParams.set(\"autocomplete\", autocomplete ? \"true\" : \"false\");\n  }\n}\n\n/**\n * Performs a forward geocoding query to MapTiler API.\n * Providing a human readable place name (of a city, country, street, etc.), the function returns\n * a list of candidate locations including longitude and latitude.\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/geocoding/#search-by-name-forward\n * @param query\n * @param options\n * @returns\n */\nasync function forward(\n  query: string,\n  options: GeocodingOptions = {},\n): Promise<GeocodingSearchResult> {\n  if (typeof query !== \"string\" || query.trim().length === 0) {\n    throw new Error(\"The query must be a non-empty string\");\n  }\n\n  const endpoint = new URL(\n    `geocoding/${encodeURIComponent(query)}.json`,\n    defaults.maptilerApiURL,\n  );\n\n  const { searchParams } = endpoint;\n\n  addForwardGeocodingOptions(searchParams, options);\n\n  const urlWithParams = endpoint.toString();\n\n  const res = await callFetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(res, customMessages[res.status] ?? \"\");\n  }\n\n  const obj: GeocodingSearchResult = await res.json();\n\n  return obj;\n}\n\n/**\n * Perform a reverse geocoding query to MapTiler API.\n * Providing a longitude and latitude, this function returns a set of human readable information about this place (country, city, street, etc.)\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/geocoding/#search-by-coordinates-reverse\n * @param position\n * @param options\n * @returns\n */\nasync function reverse(\n  position: Position,\n  options: ReverseGeocodingOptions = {},\n): Promise<GeocodingSearchResult> {\n  if (!Array.isArray(position) || position.length < 2) {\n    throw new Error(\"The position must be an array of form [lng, lat].\");\n  }\n\n  const endpoint = new URL(\n    `geocoding/${position[0]},${position[1]}.json`,\n    defaults.maptilerApiURL,\n  );\n\n  addCommonForwardAndReverseGeocodingOptions(endpoint.searchParams, options);\n\n  const urlWithParams = endpoint.toString();\n\n  const res = await callFetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(res, customMessages[res.status] ?? \"\");\n  }\n\n  const obj: GeocodingSearchResult = await res.json();\n\n  return obj;\n}\n\n/**\n * Perform a geocoding query to MapTiler API to obtain fature by its ID.\n * Providing a feature ID, this function returns a feature which includes its full geometry.\n * Note that the feature ID is not stable and it changes when the database is re-indexed.\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/geocoding/#search-by-feature-id\n * @param id\n * @param options\n * @returns\n */\nasync function byId(\n  id: string,\n  options: ByIdGeocodingOptions = {},\n): Promise<GeocodingSearchResult> {\n  const endpoint = new URL(`geocoding/${id}.json`, defaults.maptilerApiURL);\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n\n  addLanguageGeocodingOptions(endpoint.searchParams, options);\n\n  const urlWithParams = endpoint.toString();\n\n  const res = await callFetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(res, customMessages[res.status] ?? \"\");\n  }\n\n  const obj: GeocodingSearchResult = await res.json();\n\n  return obj;\n}\n\n/**\n * Perform a batch geocoding query to MapTiler API.\n * Provide multiple queries in the array. Each query can be forward, reverse or by feature ID.\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/geocoding/#batch-geocoding\n * @param queries\n * @param options\n * @returns\n */\nasync function batch(\n  queries: string[],\n  options: GeocodingOptions = {},\n): Promise<GeocodingSearchResult[]> {\n  if (!queries.length) {\n    return [];\n  }\n\n  const joinedQuery = queries\n    .map((query) => encodeURIComponent(query))\n    .join(\";\");\n\n  const endpoint = new URL(\n    `geocoding/${joinedQuery}.json`,\n    defaults.maptilerApiURL,\n  );\n\n  const { searchParams } = endpoint;\n\n  addForwardGeocodingOptions(searchParams, options);\n\n  const urlWithParams = endpoint.toString();\n\n  const res = await callFetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(res, customMessages[res.status] ?? \"\");\n  }\n\n  const obj = await res.json();\n\n  return queries.length === 1 ? [obj] : obj;\n}\n\n/**\n * The **geocoding** namespace contains asynchronous functions to call the [MapTiler Geocoding API](https://docs.maptiler.com/cloud/api/geocoding/).\n * The **Geocoding API** provides ways to get geographic coordinates from a human-readable search query of a place (forward geocoding)\n * and to get the location details (country, city, street, etc.) from a geographic coordinate (reverse geocoding);\n */\nconst geocoding = {\n  forward,\n  reverse,\n  byId,\n  batch,\n  language: LanguageGeocoding,\n};\n\nexport { geocoding };\n","import { BBox } from \"geojson\";\nimport { callFetch } from \"../callFetch\";\nimport { config } from \"../config\";\nimport { defaults } from \"../defaults\";\nimport { ServiceError } from \"./ServiceError\";\n\nconst customMessages = {\n  403: \"Key is missing, invalid or restricted\",\n};\n\n/**\n * Options that can be provided to get user data.\n */\nexport type GeolocationInfoOptions = {\n  /**\n   * Custom MapTiler Cloud API key to use instead of the one in global `config`\n   */\n  apiKey?: string;\n};\n\nexport type GeolocationResult = {\n  /**\n   * Name of the country\n   * Example: Switzerland\n   */\n  country?: string;\n\n  /**\n   * Two-letter code of the country ISO 3166-1 alpha-2 codes\n   * Example: CH\n   */\n  country_code?: string;\n\n  /**\n   * Bounds of the country in WGS84 degrees [west, south, east, north].\n   * Example: [5.95538,45.818852,10.490936,47.809357]\n   */\n  country_bounds?: BBox;\n\n  /**\n   * Official country languages in ISO 639-1 format. ISO 639-1 codes\n   * Example: [\"de\",\"fr\",\"it\"]\n   */\n  country_languages?: Array<string>;\n\n  /**\n   * Name of the continent\n   * Example: Europe\n   */\n  continent?: string;\n\n  /**\n   * Two-letter code of the continent\n   * Example: EU\n   */\n  continent_code?: string;\n\n  /**\n   * Indicated whether the country is part of the European Union.\n   */\n  eu?: boolean;\n\n  /**\n   * Name of the city\n   * Example: Zurich\n   */\n  city?: string;\n\n  /**\n   * Latitude of the location\n   * Example: 47.36667\n   */\n  latitude?: number;\n\n  /**\n   * Longitude of the location\n   * Example: 8.55\n   */\n  longitude?: number;\n\n  /**\n   * Postal code\n   * Example: 8000\n   */\n  postal?: string;\n\n  /**\n   * If known, the ISO 3166-2 name for the first level region. ISO 3166-2 codes\n   * Example: Zurich\n   */\n  region?: string;\n\n  /**\n   * If known, the ISO 3166-2 code for the first level region. ISO 3166-2 codes\n   * Example: ZH\n   */\n  region_code?: string;\n\n  /**\n   * Name of the timezone\n   * Example: Europe/Zurich\n   */\n  timezone?: string;\n};\n\n/**\n * Looks up geolocation details from IP address using MapTiler API.\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/geolocation/#ip-geolocation\n * @returns\n */\nasync function info(\n  options: GeolocationInfoOptions = {},\n): Promise<GeolocationResult> {\n  const endpoint = new URL(`geolocation/ip.json`, defaults.maptilerApiURL);\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n  const urlWithParams = endpoint.toString();\n\n  const res = await callFetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(\n      res,\n      res.status in customMessages ? customMessages[res.status] : \"\",\n    );\n  }\n\n  const obj = await res.json();\n  return obj as GeolocationResult;\n}\n\n/**\n * The **geolocation** namespace contains an asynchronous function to call the [MapTiler Geolocation API](https://docs.maptiler.com/cloud/api/geolocation/).\n * The **Geolocation API** provides a way to retrieve the IP address as well as geographic informations of a machine performing the query (most likely: a user)\n */\nconst geolocation = {\n  info,\n};\n\nexport { geolocation };\n","import { BBox, Position } from \"geojson\";\nimport { callFetch } from \"../callFetch\";\nimport { config } from \"../config\";\nimport { defaults } from \"../defaults\";\nimport { ServiceError } from \"./ServiceError\";\n\nconst customMessages = {\n  403: \"Key is missing, invalid or restricted\",\n};\n\nexport type CoordinatesSearchOptions = {\n  /**\n   * Custom MapTiler Cloud API key to use instead of the one in global `config`\n   */\n  apiKey?: string;\n\n  /**\n   * Maximum number of results returned (default: 10)\n   */\n  limit?: number;\n\n  /**\n   *  Show detailed transformations for each CRS (default: false)\n   */\n  transformations?: boolean;\n\n  /**\n   * Show exports in WKT and Proj4 notations (default: false)\n   */\n  exports?: boolean;\n};\n\nexport type CoordinateId = {\n  authority: string;\n  code: BigInteger;\n};\n\nexport type CoordinateExport = {\n  proj4: string;\n  wkt: string;\n};\n\nexport type CoordinateGrid = {\n  path: string;\n};\n\nexport type CoordinateTransformation = {\n  id: CoordinateId;\n  name: string;\n  reversible: boolean;\n  usable: boolean;\n  deprecated: boolean;\n  grids: Array<CoordinateGrid>;\n  accuracy?: number;\n  area?: string;\n  bbox?: BBox;\n  target_crs?: CoordinateId;\n  unit?: string;\n};\n\nexport type CoordinateSearch = {\n  id: CoordinateId;\n\n  name: string;\n\n  kind: string;\n\n  deprecated: boolean;\n\n  transformations?: Array<CoordinateTransformation | number>;\n\n  accuracy?: number;\n\n  unit?: string;\n\n  area?: string;\n\n  /**\n   * Bounding box of the resource in [min_lon, min_lat, max_lon, max_lat] order.\n   */\n  bbox?: BBox;\n\n  /**\n   * Most suitable transformation for this CRS.\n   */\n  default_transformation?: DefaultTransformation;\n\n  exports: CoordinateExport;\n};\n\nexport type DefaultTransformation = {\n  authority: string;\n  code: number;\n};\n\nexport type CoordinateSearchResult = {\n  /**\n   * The coordinate search results\n   */\n  results: Array<CoordinateSearch>;\n\n  /**\n   * The number of results\n   */\n  total: number;\n};\n\n/**\n * Search information about coordinate systems using MapTiler API.\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/coordinates/#search-coordinate-systems\n * @param query Can be any kind of CRS by name or code\n * @param options\n * @returns\n */\nasync function search(\n  query: string,\n  options: CoordinatesSearchOptions = {},\n): Promise<CoordinateSearchResult> {\n  if (typeof query !== \"string\" || query.trim().length === 0) {\n    throw new Error(\"The query must be a non-empty string\");\n  }\n\n  const endpoint = new URL(\n    `coordinates/search/${query}.json`,\n    defaults.maptilerApiURL,\n  );\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n\n  if (\"limit\" in options) {\n    endpoint.searchParams.set(\"limit\", options.limit.toString());\n  }\n\n  if (\"transformations\" in options) {\n    endpoint.searchParams.set(\n      \"transformations\",\n      options.transformations.toString(),\n    );\n  }\n\n  if (\"exports\" in options) {\n    endpoint.searchParams.set(\"exports\", options.exports.toString());\n  }\n\n  const urlWithParams = endpoint.toString();\n  const res = await callFetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(\n      res,\n      res.status in customMessages ? customMessages[res.status] : \"\",\n    );\n  }\n\n  const obj = await res.json();\n  return obj as CoordinateSearchResult;\n}\n\nexport type XYZ = {\n  x?: number;\n  y?: number;\n  z?: number;\n};\n\nexport type CoordinateTransformResult = {\n  results: Array<XYZ>;\n\n  /**\n   * Transformations are selected using given ops parameter.\n   * If no parameter is given, auto strategy is used.\n   * If given, it may try to use a listed transformation,\n   * then fallback to towgs84 patching, and finally boundcrs.\n   */\n  transformer_selection_strategy: string;\n};\n\n/**\n * Options that can be provided when transforming a coordinate from one CRS to another.\n */\nexport type CoordinatesTransformOptions = {\n  /**\n   * Custom MapTiler Cloud API key to use instead of the one in global `config`\n   */\n  apiKey?: string;\n\n  /**\n   * Source coordinate reference system (default: 4326)\n   */\n  sourceCrs?: number;\n\n  /**\n   * Target coordinate reference system (default: 4326)\n   */\n  targetCrs?: number;\n\n  /**\n   * List of codes of operations\n   */\n  operations?: number | Array<number>;\n};\n\n/**\n * Transforms coordinates from a source reference system to a target reference system using MapTiler API.\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/coordinates/#transform-coordinates\n * @param positions\n * @param options\n * @returns\n */\nasync function transform(\n  positions: Position | Array<Position>,\n  options: CoordinatesTransformOptions = {},\n): Promise<CoordinateTransformResult> {\n  const coordinatesStr = (Array.isArray(positions[0]) ? positions : [positions])\n    .map((coord) => `${coord[0]},${coord[1]}`)\n    .join(\";\");\n\n  const endpoint = new URL(\n    `coordinates/transform/${coordinatesStr}.json`,\n    defaults.maptilerApiURL,\n  );\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n\n  if (\"sourceCrs\" in options) {\n    endpoint.searchParams.set(\"s_srs\", options.sourceCrs.toString());\n  }\n\n  if (\"targetCrs\" in options) {\n    endpoint.searchParams.set(\"t_srs\", options.targetCrs.toString());\n  }\n\n  if (\"operations\" in options) {\n    endpoint.searchParams.set(\n      \"ops\",\n      (Array.isArray(options.operations)\n        ? options.operations\n        : [options.operations]\n      ).join(\"|\"),\n    );\n  }\n\n  const urlWithParams = endpoint.toString();\n  const res = await callFetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(\n      res,\n      res.status in customMessages ? customMessages[res.status] : \"\",\n    );\n  }\n\n  const obj = await res.json();\n  return obj as CoordinateTransformResult;\n}\n\n/**\n * The **coordinate** namespace contains asynchronous functions to call the [MapTiler Coordinate API](https://docs.maptiler.com/cloud/api/coordinates/).\n * The goal of the **Coordinate API* is query information about spatial coordinate reference system (CRS) as well as to transform coordinates from one CRS to another.\n */\nconst coordinates = {\n  search,\n  transform,\n};\n\nexport { coordinates };\n","import { FeatureCollection } from \"geojson\";\nimport { callFetch } from \"../callFetch\";\nimport { config } from \"../config\";\nimport { defaults } from \"../defaults\";\nimport { ServiceError } from \"./ServiceError\";\n\nconst customMessages = {\n  403: \"Key is missing, invalid or restricted\",\n};\n\n/**\n * Options that can be provided to get user data.\n */\nexport type GetDataOptions = {\n  /**\n   * Custom MapTiler Cloud API key to use instead of the one in global `config`\n   */\n  apiKey?: string;\n};\n\n/**\n * Get user data and returns it as GeoJSON using the MapTiler API.\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/data/#geojson\n * @param dataId\n * @returns\n */\nasync function get(\n  dataId: string,\n  options: GetDataOptions = {},\n): Promise<FeatureCollection> {\n  if (typeof dataId !== \"string\" || dataId.trim().length === 0) {\n    throw new Error(\"The data ID must be a non-empty string\");\n  }\n\n  const endpoint = new URL(\n    `data/${encodeURIComponent(dataId)}/features.json`,\n    defaults.maptilerApiURL,\n  );\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n  const urlWithParams = endpoint.toString();\n\n  const res = await callFetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(\n      res,\n      res.status in customMessages ? customMessages[res.status] : \"\",\n    );\n  }\n\n  const obj = await res.json();\n  return obj;\n}\n\n/**\n * The **data** namespace contains an asynchronous function to call the [MapTiler Data API](https://docs.maptiler.com/cloud/api/data/).\n * The **Data API** provides a way to retrieve user data in GeoJSON format.\n */\nconst data = {\n  get,\n};\n\nexport { data };\n","/**\n * Expand the map style provided as argument of the Map constructor\n * @param style\n * @returns\n */\nexport function expandMapStyle(style): string {\n  // testing if the style provided is of form \"maptiler://some-style\"\n  const maptilerDomainRegex = /^maptiler:\\/\\/(.*)/;\n  let match;\n  const trimmed = style.trim();\n  let expandedStyle;\n\n  // The style was possibly already given as expanded URL\n  if (trimmed.startsWith(\"http://\") || trimmed.startsWith(\"https://\")) {\n    expandedStyle = trimmed;\n  } else if ((match = maptilerDomainRegex.exec(trimmed)) !== null) {\n    expandedStyle = `https://api.maptiler.com/maps/${match[1]}/style.json`;\n  } else {\n    // The style could also possibly just be the name of the style without any URI style\n    expandedStyle = `https://api.maptiler.com/maps/${trimmed}/style.json`;\n  }\n\n  return expandedStyle;\n}\n\n/**\n * Type for object containing style details\n */\nexport type MapStylePreset = {\n  referenceStyleID: string;\n  name: string;\n  description: string;\n  variants: Array<{\n    id: string;\n    name: string;\n    variantType: string;\n    description: string;\n    imageURL: string;\n  }>;\n};\n\n/**\n * An instance of MapStyleVariant contains information about a style to use that belong to a reference style\n */\nexport class MapStyleVariant {\n  constructor(\n    /**\n     * Human-friendly name\n     */\n    private name: string,\n\n    /**\n     * Variant name the variant is addressed to from its reference style: `MapStyle.REFERNCE_STYLE_NAME.VARIANT_TYPE`\n     */\n    private variantType: string,\n\n    /**\n     * MapTiler Cloud id\n     */\n    private id: string,\n\n    /**\n     * Reference map style, used to retrieve sibling variants\n     */\n    private referenceStyle: ReferenceMapStyle,\n\n    /**\n     * Human-friendly description\n     */\n    private description: string,\n\n    /**\n     * URL to an image describing the style variant\n     */\n    private imageURL: string,\n  ) {}\n\n  /**\n   * Get the human-friendly name\n   * @returns\n   */\n  getName(): string {\n    return this.name;\n  }\n\n  getFullName(): string {\n    return `${this.referenceStyle.getName()} ${this.name}`;\n  }\n\n  /**\n   * Get the variant type (eg. \"DEFAULT\", \"DARK\", \"PASTEL\", etc.)\n   * @returns\n   */\n  getType(): string {\n    return this.variantType;\n  }\n\n  /**\n   * Get the MapTiler Cloud id\n   * @returns\n   */\n  getId(): string {\n    return this.id;\n  }\n\n  /**\n   * Get the human-friendly description\n   */\n  getDescription(): string {\n    return this.description;\n  }\n\n  /**\n   * Get the reference style this variant belongs to\n   * @returns\n   */\n  getReferenceStyle(): ReferenceMapStyle {\n    return this.referenceStyle;\n  }\n\n  /**\n   * Check if a variant of a given type exists for _this_ variants\n   * (eg. if this is a \"DARK\", then we can check if there is a \"LIGHT\" variant of it)\n   * @param variantType\n   * @returns\n   */\n  hasVariant(variantType: string): boolean {\n    return this.referenceStyle.hasVariant(variantType);\n  }\n\n  /**\n   * Retrieve the variant of a given type. If not found, will return the \"DEFAULT\" variant.\n   * (eg. _this_ \"DARK\" variant does not have any \"PASTEL\" variant, then the \"DEFAULT\" is returned)\n   * @param variantType\n   * @returns\n   */\n  getVariant(variantType: string): MapStyleVariant {\n    return this.referenceStyle.getVariant(variantType);\n  }\n\n  /**\n   * Get all the variants for _this_ variants, except _this_ current one\n   * @returns\n   */\n  getVariants(): Array<MapStyleVariant> {\n    return this.referenceStyle.getVariants().filter((v) => v !== this);\n  }\n\n  /**\n   * Get the image URL that represent _this_ variant\n   * @returns\n   */\n  getImageURL(): string {\n    return this.imageURL;\n  }\n\n  /**\n   * Get the style as usable by MapLibre, a string (URL) or a plain style description (StyleSpecification)\n   * @returns\n   */\n  getExpandedStyleURL(): string {\n    return expandMapStyle(this.getId());\n  }\n}\n\n/**\n * An instance of reference style contains a list of StyleVariants ordered by relevance\n */\nexport class ReferenceMapStyle {\n  /**\n   * Variants that belong to this reference style, key being the reference type\n   */\n  private variants: { [key: string]: MapStyleVariant } = {};\n\n  /**\n   * Variants that belong to this reference style, ordered by relevance\n   */\n  private orderedVariants: Array<MapStyleVariant> = [];\n\n  constructor(\n    /**\n     * Human-friendly name of this reference style\n     */\n    private name: string,\n\n    /**\n     * ID of this reference style\n     */\n    private id: string,\n  ) {}\n\n  /**\n   * Get the human-friendly name of this reference style\n   * @returns\n   */\n  getName(): string {\n    return this.name;\n  }\n\n  /**\n   * Get the id of _this_ reference style\n   * @returns\n   */\n  getId(): string {\n    return this.id;\n  }\n\n  /**\n   * Add a variant to _this_ reference style\n   * @param v\n   */\n  addVariant(v: MapStyleVariant) {\n    this.variants[v.getType()] = v;\n    this.orderedVariants.push(v);\n  }\n\n  /**\n   * Check if a given variant type exists for this reference style\n   * @param variantType\n   * @returns\n   */\n  hasVariant(variantType: string): boolean {\n    return variantType in this.variants;\n  }\n\n  /**\n   * Get a given variant. If the given type of variant does not exist for this reference style,\n   * then the most relevant default variant is returned instead\n   * @param variantType\n   * @returns\n   */\n  getVariant(variantType: string): MapStyleVariant {\n    return variantType in this.variants\n      ? this.variants[variantType]\n      : this.orderedVariants[0];\n  }\n\n  /**\n   * Get the list of variants for this reference style\n   * @returns\n   */\n  getVariants(): Array<MapStyleVariant> {\n    return Object.values(this.variants);\n  }\n\n  /**\n   * Get the defualt variant for this reference style\n   * @returns\n   */\n  getDefaultVariant(): MapStyleVariant {\n    return this.orderedVariants[0];\n  }\n}\n\n/**\n * All the styles and variants maintained by MapTiler.\n */\nexport type MapStyleType = {\n  /**\n   * Suitable for navigation, with high level of detail on urban areas, plenty of POIs and 3D buildings\n   */\n  STREETS: ReferenceMapStyle & {\n    /**\n     * Suitable for navigation, with high level of detail on urban areas, plenty of POIs and 3D buildings.\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * Suitable for navigation, with high level of detail on urban areas, plenty of POIs and 3D buildings, in dark mode.\n     */\n    DARK: MapStyleVariant;\n    /**\n     * Suitable for navigation, with high level of detail on urban areas, plenty of POIs and 3D buildings, in light mode.\n     */\n    LIGHT: MapStyleVariant;\n    /**\n     * Suitable for navigation, with high level of detail on urban areas, plenty of POIs and 3D buildings, in blue night mode.\n     */\n    NIGHT: MapStyleVariant;\n    /**\n     * Suitable for navigation, with high level of detail on urban areas, plenty of POIs and 3D buildings, with a pastel color palette.\n     */\n    PASTEL: MapStyleVariant;\n  };\n\n  /**\n   * Suitable for outdoor activities. With elevation isolines and hillshading.\n   */\n  OUTDOOR: ReferenceMapStyle & {\n    /**\n     * Suitable for outdoor activities. With elevation isolines and hillshading.\n     */\n    DEFAULT: MapStyleVariant;\n\n    /**\n     * Suitable for outdoor activities. With elevation isolines and hillshading, in dark mode.\n     */\n    DARK: MapStyleVariant;\n  };\n\n  /**\n   * Suitabe for winter outdoor activities. With ski tracks, elevation isolines and hillshading.\n   */\n  WINTER: ReferenceMapStyle & {\n    /**\n     * Suitabe for winter outdoor activities. With ski tracks, elevation isolines and hillshading.\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * Suitabe for winter outdoor activities. With ski tracks, elevation isolines and hillshading, in dark mode.\n     */\n    DARK: MapStyleVariant;\n  };\n\n  /**\n   * High resolution imagery only, without any label.\n   */\n  SATELLITE: ReferenceMapStyle & {\n    /**\n     * High resolution imagery only, without any label.\n     */\n    DEFAULT: MapStyleVariant;\n  };\n\n  /**\n   * High resolution imagery with labels, political borders and roads.\n   */\n  HYBRID: ReferenceMapStyle & {\n    /**\n     * High resolution imagery with labels, political borders and roads.\n     */\n    DEFAULT: MapStyleVariant;\n  };\n\n  /**\n   * A minimalist street-oriented style without POI\n   */\n  BASIC: ReferenceMapStyle & {\n    /**\n     * A minimalist street-oriented style without POI\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * A minimalist street-oriented style without POI, in dark mode\n     */\n    DARK: MapStyleVariant;\n    /**\n     * A minimalist street-oriented style without POI, in light mode\n     */\n    LIGHT: MapStyleVariant;\n  };\n\n  /**\n   * A bright street-oriented style, a nice alternative to `streets`\n   */\n  BRIGHT: ReferenceMapStyle & {\n    /**\n     * A bright street-oriented style, a nice alternative to `streets`\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * A bright street-oriented style, a nice alternative to `streets`, in dark mode\n     */\n    DARK: MapStyleVariant;\n    /**\n     * A bright street-oriented style, a nice alternative to `streets`, in light mode\n     */\n    LIGHT: MapStyleVariant;\n    /**\n     * A bright street-oriented style, a nice alternative to `streets`, with a soft pastel color palette\n     */\n    PASTEL: MapStyleVariant;\n  };\n\n  /**\n   * Classic OpenStreetMap style\n   */\n  OPENSTREETMAP: ReferenceMapStyle & {\n    DEFAULT: MapStyleVariant;\n  };\n\n  /**\n   * A nice high-contrast, yet less saturated alternative to the `outdoor` style, with hillshading, 3D buildings and fairly high street details\n   */\n  TOPO: ReferenceMapStyle & {\n    /**\n     * A nice high-contrast, yet less saturated alternative to the `outdoor` style, with hillshading, 3D buildings and fairly high street details\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * A nice high-contrast, yet less saturated alternative to the `outdoor` style, with hillshading, 3D buildings and fairly high street details, in dark mode\n     */\n    DARK: MapStyleVariant;\n    /**\n     * A nice high-contrast, and high saturation alternative to the `outdoor` style, with hillshading, 3D buildings and fairly high street details\n     */\n    SHINY: MapStyleVariant;\n    /**\n     * A nice low-contrast, alternative to the `outdoor` style, with hillshading, 3D buildings and fairly high street details, using a soft pastel color palette\n     */\n    PASTEL: MapStyleVariant;\n\n    /**\n     * A nice very high-contrast, yet less saturated alternative to the `outdoor` style, with hillshading, 3D buildings and fairly high street details\n     */\n    TOPOGRAPHIQUE: MapStyleVariant;\n  };\n\n  /**\n   * A nice alternative to `streets` with a soft color palette\n   */\n  VOYAGER: ReferenceMapStyle & {\n    /**\n     * A nice alternative to `streets` with a soft color palette\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * A nice alternative to `streets`, in very dark mode\n     */\n    DARK: MapStyleVariant;\n    /**\n     * A nice alternative to `streets`, in light mode\n     */\n    LIGHT: MapStyleVariant;\n    /**\n     * A nice alternative to `streets` with a soft sepia color palette and vintage look\n     */\n    VINTAGE: MapStyleVariant;\n  };\n\n  /**\n   * A bold very high contrast black and white (no gray!) style for the city\n   */\n  TONER: ReferenceMapStyle & {\n    /**\n     * A bold very high contrast black and white (no gray!) style for the city\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * A bold very high contrast black and white (no gray!) style for the city, without any label\n     */\n    BACKGROUND: MapStyleVariant;\n    /**\n     * A bold very high contrast, yet faded, style for the city\n     */\n    LITE: MapStyleVariant;\n    /**\n     * A bold very high contrast black and white (no gray!) style for the city, with no building, only roads!\n     */\n    LINES: MapStyleVariant;\n  };\n\n  /**\n   * Minimalist style, perfect for data visualization\n   */\n  DATAVIZ: ReferenceMapStyle & {\n    /**\n     *  Minimalist style, perfect for data visualization\n     */\n    DEFAULT: MapStyleVariant;\n\n    /**\n     *  Minimalist style, perfect for data visualization in dark mode\n     */\n    DARK: MapStyleVariant;\n\n    /**\n     *  Minimalist style, perfect for data visualization in light mode\n     */\n    LIGHT: MapStyleVariant;\n  };\n\n  /**\n   * Explore deep see trenches and mountains, with isolines and depth labels\n   */\n  OCEAN: ReferenceMapStyle & {\n    /**\n     * Explore deep see trenches and mountains, with isolines and depth labels\n     */\n    DEFAULT: MapStyleVariant;\n  };\n\n  /**\n   * Neutral greyscale style with hillshading suitable for colorful terrain-aware visualization\n   */\n  BACKDROP: ReferenceMapStyle & {\n    /**\n     *  Neutral greyscale style with hillshading suitable for colorful terrain-aware visualization\n     */\n    DEFAULT: MapStyleVariant;\n\n    /**\n     *  Dark greyscale style with hillshading suitable for colorful terrain-aware visualization\n     */\n    DARK: MapStyleVariant;\n\n    /**\n     *  Light greyscale style with hillshading suitable for colorful terrain-aware visualization\n     */\n    LIGHT: MapStyleVariant;\n  };\n};\n\nexport const mapStylePresetList: Array<MapStylePreset> = [\n  {\n    referenceStyleID: \"STREETS\",\n    name: \"Streets\",\n    description: \"\",\n    variants: [\n      {\n        id: \"streets-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"streets-v2-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"streets-v2-light\",\n        name: \"Light\",\n        variantType: \"LIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"streets-v2-night\",\n        name: \"Night\",\n        variantType: \"NIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"streets-v2-pastel\",\n        name: \"Pastel\",\n        variantType: \"PASTEL\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"OUTDOOR\",\n    name: \"Outdoor\",\n    description: \"\",\n    variants: [\n      {\n        id: \"outdoor-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"outdoor-v2-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"WINTER\",\n    name: \"Winter\",\n    description: \"\",\n    variants: [\n      {\n        id: \"winter-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"winter-v2-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"SATELLITE\",\n    name: \"Satellite\",\n    description: \"\",\n    variants: [\n      {\n        id: \"satellite\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"HYBRID\",\n    name: \"Hybrid\",\n    description: \"\",\n    variants: [\n      {\n        id: \"hybrid\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"BASIC\",\n    name: \"Basic\",\n    description: \"\",\n    variants: [\n      {\n        id: \"basic-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"basic-v2-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"basic-v2-light\",\n        name: \"Light\",\n        variantType: \"LIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"BRIGHT\",\n    name: \"Bright\",\n    description: \"\",\n    variants: [\n      {\n        id: \"bright-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"bright-v2-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"bright-v2-light\",\n        name: \"Light\",\n        variantType: \"LIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"bright-v2-pastel\",\n        name: \"Pastel\",\n        variantType: \"PASTEL\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"OPENSTREETMAP\",\n    name: \"OpenStreetMap\",\n    description: \"\",\n    variants: [\n      {\n        id: \"openstreetmap\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"TOPO\",\n    name: \"Topo\",\n    description: \"\",\n    variants: [\n      {\n        id: \"topo-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"topo-v2-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"topo-v2-shiny\",\n        name: \"Shiny\",\n        variantType: \"SHINY\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"topo-v2-pastel\",\n        name: \"Pastel\",\n        variantType: \"PASTEL\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"topo-v2-topographique\",\n        name: \"Topographique\",\n        variantType: \"TOPOGRAPHIQUE\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"VOYAGER\",\n    name: \"Voyager\",\n    description: \"\",\n    variants: [\n      {\n        id: \"voyager-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"voyager-v2-darkmatter\",\n        name: \"Darkmatter\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"voyager-v2-positron\",\n        name: \"Positron\",\n        variantType: \"LIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"voyager-v2-vintage\",\n        name: \"Vintage\",\n        variantType: \"VINTAGE\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"TONER\",\n    name: \"Toner\",\n    description: \"\",\n    variants: [\n      {\n        id: \"toner-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"toner-v2-background\",\n        name: \"Background\",\n        variantType: \"BACKGROUND\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"toner-v2-lite\",\n        name: \"Lite\",\n        variantType: \"LITE\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"toner-v2-lines\",\n        name: \"Lines\",\n        variantType: \"LINES\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"DATAVIZ\",\n    name: \"Dataviz\",\n    description: \"\",\n    variants: [\n      {\n        id: \"dataviz\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"dataviz-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"dataviz-light\",\n        name: \"Light\",\n        variantType: \"LIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"BACKDROP\",\n    name: \"Backdrop\",\n    description: \"\",\n    variants: [\n      {\n        id: \"backdrop\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"backdrop-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"backdrop-light\",\n        name: \"Light\",\n        variantType: \"LIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"OCEAN\",\n    name: \"Ocean\",\n    description: \"\",\n    variants: [\n      {\n        id: \"ocean\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n];\n\nfunction makeReferenceStyleProxy(referenceStyle: ReferenceMapStyle) {\n  return new Proxy(referenceStyle, {\n    get(target, prop, receiver) {\n      if (target.hasVariant(prop as string)) {\n        return target.getVariant(prop as string);\n      }\n\n      // This variant does not exist for this style, but since it's full uppercase\n      // we guess that the dev tries to access a style variant. So instead of\n      // returning the default (STREETS.DEFAULT), we return the non-variant of the current style\n      if (prop.toString().toUpperCase() === (prop as string)) {\n        return referenceStyle.getDefaultVariant();\n      }\n\n      return Reflect.get(target, prop, receiver);\n    },\n  });\n}\n\nfunction buildMapStyles(): MapStyleType {\n  const mapStyle = {};\n\n  for (let i = 0; i < mapStylePresetList.length; i += 1) {\n    const refStyleInfo = mapStylePresetList[i];\n\n    const refStyle = makeReferenceStyleProxy(\n      new ReferenceMapStyle(refStyleInfo.name, refStyleInfo.referenceStyleID),\n    );\n\n    for (let j = 0; j < refStyleInfo.variants.length; j += 1) {\n      const variantInfo = refStyleInfo.variants[j];\n      const variant = new MapStyleVariant(\n        variantInfo.name, // name\n        variantInfo.variantType, // variantType\n        variantInfo.id, // id\n        refStyle, // referenceStyle\n        variantInfo.description,\n        variantInfo.imageURL, // imageURL\n      );\n\n      refStyle.addVariant(variant);\n    }\n    mapStyle[refStyleInfo.referenceStyleID] = refStyle;\n  }\n  return mapStyle as MapStyleType;\n}\n\nexport function styleToStyle(\n  style: string | ReferenceMapStyle | MapStyleVariant | null | undefined,\n): string {\n  if (!style) {\n    return MapStyle[mapStylePresetList[0].referenceStyleID]\n      .getDefaultVariant()\n      .getId();\n  }\n\n  // If the provided style is a shorthand (eg. \"streets-v2\") then we make sure it's trimmed and lowercase\n  if (typeof style === \"string\" || style instanceof String) {\n    return style.trim().toLowerCase();\n  }\n\n  if (style instanceof MapStyleVariant) {\n    return style.getId();\n  }\n\n  if (style instanceof ReferenceMapStyle) {\n    return style.getDefaultVariant().getId();\n  }\n}\n\n/**\n * Contains all the reference map style created by MapTiler team as well as all the variants.\n * For example, `MapStyle.STREETS` and the variants:\n * - `MapStyle.STREETS.DARK`\n * - `MapStyle.STREETS.LIGHT`\n * - `MapStyle.STREETS.PASTEL`\n *\n */\nexport const MapStyle: MapStyleType = buildMapStyles();\n","import {\n  GeoJsonObject,\n  GeometryObject,\n  LineString,\n  MultiLineString,\n  Feature,\n  FeatureCollection,\n  Position,\n} from \"geojson\";\n\n/**\n * From a generic GeoJSON object extract thepossibly nested LineString and MultiLineString features\n * it contains. The result is a flat array made of LineString and MultiLineString.\n */\nfunction extractLineStrings(\n  geoJson: GeoJsonObject,\n): Array<LineString | MultiLineString> {\n  const lineStrings: Array<LineString | MultiLineString> = [];\n\n  function extractFromGeometry(geometry: GeometryObject) {\n    if (geometry.type === \"LineString\" || geometry.type === \"MultiLineString\") {\n      lineStrings.push(geometry as LineString | MultiLineString);\n    }\n  }\n\n  function extractFromFeature(feature: Feature) {\n    if (feature.geometry) {\n      extractFromGeometry(feature.geometry);\n    }\n  }\n\n  function extractFromFeatureCollection(collection: FeatureCollection) {\n    for (const feature of collection.features) {\n      if (feature.type === \"Feature\") {\n        extractFromFeature(feature);\n      } else if (feature.type === \"FeatureCollection\") {\n        extractFromFeatureCollection(feature as unknown as FeatureCollection); // had to add unknown\n      }\n    }\n  }\n\n  if (geoJson.type === \"Feature\") {\n    extractFromFeature(geoJson as Feature);\n  } else if (geoJson.type === \"FeatureCollection\") {\n    extractFromFeatureCollection(geoJson as FeatureCollection);\n  } else {\n    // It's a single geometry\n    extractFromGeometry(geoJson as GeometryObject);\n  }\n\n  return lineStrings;\n}\n\n// square distance from a point to a segment\nfunction getSqSegDist(p: Position, p1: Position, p2: Position): number {\n  let x = p1[0],\n    y = p1[1],\n    dx = p2[0] - x,\n    dy = p2[1] - y;\n\n  if (dx !== 0 || dy !== 0) {\n    const t = ((p[0] - x) * dx + (p[1] - y) * dy) / (dx * dx + dy * dy);\n\n    if (t > 1) {\n      x = p2[0];\n      y = p2[1];\n    } else if (t > 0) {\n      x += dx * t;\n      y += dy * t;\n    }\n  }\n\n  dx = p[0] - x;\n  dy = p[1] - y;\n\n  return dx * dx + dy * dy;\n}\n\nfunction simplifyDPStep(\n  points: Array<Position>,\n  first: number,\n  last: number,\n  sqTolerance: number,\n  simplified: Array<Position>,\n) {\n  let maxSqDist = sqTolerance,\n    index;\n\n  for (let i = first + 1; i < last; i++) {\n    const sqDist = getSqSegDist(points[i], points[first], points[last]);\n\n    if (sqDist > maxSqDist) {\n      index = i;\n      maxSqDist = sqDist;\n    }\n  }\n\n  if (maxSqDist > sqTolerance) {\n    if (index - first > 1) {\n      simplifyDPStep(points, first, index, sqTolerance, simplified);\n    }\n    simplified.push(points[index]);\n\n    if (last - index > 1) {\n      simplifyDPStep(points, index, last, sqTolerance, simplified);\n    }\n  }\n}\n\n// simplification using Ramer-Douglas-Peucker algorithm\nfunction simplifyDouglasPeucker(\n  points: Array<Position>,\n  sqTolerance: number,\n): Array<Position> {\n  const last = points.length - 1;\n  const simplified = [points[0]];\n  simplifyDPStep(points, 0, last, sqTolerance, simplified);\n  simplified.push(points[last]);\n  return simplified;\n}\n\n/**\n * Simplify a path made of a list of GeoJSON Positions, with a tolerance.\n */\nfunction simplify(points: Array<Position>, tolerance: number): Array<Position> {\n  if (points.length <= 2) {\n    return points;\n  }\n\n  const sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;\n  const simplePoints = simplifyDouglasPeucker(points, sqTolerance);\n  return simplePoints;\n}\n\nexport const misc = {\n  extractLineStrings,\n  simplify,\n};\n","import { BBox, Position } from \"geojson\";\nimport { config } from \"../config\";\nimport { defaults } from \"../defaults\";\nimport { MapStyleVariant, ReferenceMapStyle, styleToStyle } from \"../mapstyle\";\nimport { misc } from \"../misc\";\n\n/**\n * Base set of options that can be provided to all the types of static maps\n */\nexport type StaticMapBaseOptions = {\n  /**\n   * Custom MapTiler Cloud API key to use instead of the one in global `config`\n   */\n  apiKey?: string;\n\n  /**\n   * Style of the map (not full style URL). Example: \"winter\", \"streets-v2\".\n   * Default: `\"streets-v2\"`\n   */\n  style?: string | ReferenceMapStyle | MapStyleVariant;\n\n  /**\n   * Double the size of the static map image to support hiDPI/Retina monitors.\n   * Default: `false`\n   */\n  hiDPI?: boolean;\n\n  /**\n   * Image format.\n   * Default: `\"png\"`\n   */\n  format?: \"png\" | \"jpg\" | \"webp\";\n\n  /**\n   * Width of the output image. Maximum value: `2048`.\n   * Default: `1024`\n   */\n  width?: number;\n\n  /**\n   * Height of the output image. Maximum value: `2048`.\n   * Default: `1024`\n   */\n  height?: number;\n\n  /**\n   * Placement of the attribution. Can also be set to `false` to not show attribution.\n   * Default: `\"bottomright\"`\n   */\n  attribution?: \"bottomright\" | \"bottomleft\" | \"topleft\" | \"topright\" | false;\n\n  /**\n   * A marker or list of markers to show on the map\n   * Default: none provided\n   */\n  markers?: StaticMapMarker | Array<StaticMapMarker>;\n\n  /**\n   * URL of the marker image. Applies only if one or multiple markers positions are provided.\n   * Default: none provided\n   */\n  markerIcon?: string;\n\n  /**\n   * Position of the marker regarding its coordinates. Applies only:\n   * - with a custom icon provided with `markerIcon`\n   * - if one or multiple markers positions are provided.\n   * Default: `\"bottom\"`\n   */\n  markerAnchor?:\n    | \"top\"\n    | \"left\"\n    | \"bottom\"\n    | \"right\"\n    | \"center\"\n    | \"topleft\"\n    | \"bottomleft\"\n    | \"topright\"\n    | \"bottomright\";\n\n  /**\n   * Draw a path or polygon on top of the map. If the path is too long it will be simplified, yet remaining accurate.\n   * Default: none provided\n   */\n  path?: Array<Position>;\n\n  /**\n   * Color of the path line. The color must be CSS compatible.\n   * Examples:\n   * - long form hex without transparency `\"#FF0000\"` (red)\n   * - short form hex without transparency `\"#F00\"` (red)\n   * - long form hex with transparency `\"#FF000008\"` (red, half opacity)\n   * - short form hex with transparency `\"#F008\"` (red, half opacity)\n   * - CSS color shorthands: `\"red\"`, `\"chartreuse\"`, etc.\n   * - decimal RGB values without transparency: `\"rgb(128, 100, 255)\"`\n   * - decimal RGB values with transparency: `\"rgb(128, 100, 255, 0.5)\"`\n   * Default: `\"blue\"`\n   */\n  pathStrokeColor?: string;\n\n  /**\n   * Color of the filling, also works if the polygon is not closed. The color must be CSS compatible.\n   * Examples:\n   * - long form hex without transparency `\"#FF0000\"` (red)\n   * - short form hex without transparency `\"#F00\"` (red)\n   * - long form hex with transparency `\"#FF000008\"` (red, half opacity)\n   * - short form hex with transparency `\"#F008\"` (red, half opacity)\n   * - CSS color shorthands: `\"red\"`, `\"chartreuse\"`, etc.\n   * - decimal RGB values without transparency: `\"rgb(128, 100, 255)\"`\n   * - decimal RGB values with transparency: `\"rgb(128, 100, 255, 0.5)\"`\n   * Default: none (transparent filling)\n   */\n  pathFillColor?: string;\n\n  /**\n   * Width of the path line in pixel. It can be floating point precision (ex: `0.5`)\n   * Default: `1` if `hiDPI` is `false` and `2` if `hiDPI` is `true`.\n   */\n  pathWidth?: number;\n};\n\n/**\n * Options that can be provided to centered static maps\n */\nexport type CenteredStaticMapOptions = StaticMapBaseOptions;\n\n/**\n * Options that can be provided to bounded static maps\n */\nexport type BoundedStaticMapOptions = StaticMapBaseOptions & {\n  /**\n   * Extra space added around the regio of interest, in percentage.\n   * Default: `0.1` (for 10%)\n   */\n  padding?: number;\n};\n\n/**\n * Options that can be provided to automatic static maps\n */\nexport type AutomaticStaticMapOptions = BoundedStaticMapOptions;\n\n/**\n * Definition of a maker to show on a static map\n */\nexport type StaticMapMarker = [\n  /**\n   * Longitude of the marker\n   */\n  number,\n  /**\n   * latitude of the marker\n   */\n  number,\n  /**\n   * Color of the marker with CSS syntax. Applies only if a custom `markerIcon` is not provided.\n   */\n  string,\n];\n\nfunction staticMapMarkerToString(\n  marker: StaticMapMarker,\n  includeColor = true,\n): string {\n  let str = `${marker[0]},${marker[1]}`;\n\n  if (marker.length === 3 && includeColor) {\n    str += `,${marker[2]}`;\n  }\n\n  return str;\n}\n\nfunction simplifyAndStringify(path: Array<Position>, maxNbChar = 3000): string {\n  let str = path.map((point) => point.join(\",\")).join(\"|\");\n  let tolerance = 0.000005;\n  const toleranceStep = 0.00001;\n\n  while (str.length > maxNbChar) {\n    const simplerPath = misc.simplify(path, tolerance);\n    // str = simplerPath.map(point => point.join(',')).join('|');\n    str = simplerPath.map((point) => `${point[0]},${point[1]}`).join(\"|\");\n    tolerance += toleranceStep;\n  }\n\n  return str;\n}\n\n/**\n * Construct the URL for a static map centered on one point.\n * Note: this function does not fetch the binary content of the image since\n * the purpose of a static map is generally to have its URL as a `src` property of a <img/> element.\n * If a path is provided and is too long, it will be simplified in an accurate way.\n * @param center\n * @param zoom\n * @param options\n * @returns\n */\nfunction centered(\n  center: Position,\n  zoom: number,\n  options: CenteredStaticMapOptions = {},\n): string {\n  const style = styleToStyle(options.style);\n  const scale = options.hiDPI ? \"@2x\" : \"\";\n  const format = options.format ?? \"png\";\n  let width = ~~(options.width ?? 1024);\n  let height = ~~(options.height ?? 1024);\n\n  if (options.hiDPI) {\n    width = ~~(width / 2);\n    height = ~~(height / 2);\n  }\n\n  const endpoint = new URL(\n    `maps/${encodeURIComponent(style)}/static/${center[0]},${\n      center[1]\n    },${zoom}/${width}x${height}${scale}.${format}`,\n    defaults.maptilerApiURL,\n  );\n\n  if (\"attribution\" in options) {\n    endpoint.searchParams.set(\"attribution\", options.attribution.toString());\n  }\n\n  if (\"markers\" in options) {\n    let markerStr = \"\";\n\n    const hasIcon = \"markerIcon\" in options;\n\n    if (hasIcon) {\n      markerStr += `icon:${options.markerIcon}|`;\n    }\n\n    if (hasIcon && \"markerAnchor\" in options) {\n      markerStr += `anchor:${options.markerAnchor}|`;\n    }\n\n    if (hasIcon && options.hiDPI) {\n      markerStr += `scale:2|`;\n    }\n\n    const markerList = Array.isArray(options.markers[0])\n      ? options.markers\n      : [options.markers];\n    markerStr += markerList\n      .map((m) => staticMapMarkerToString(m, !hasIcon))\n      .join(\"|\");\n    endpoint.searchParams.set(\"markers\", markerStr);\n  }\n\n  if (\"path\" in options) {\n    let pathStr = \"\";\n\n    pathStr += `fill:${options.pathFillColor ?? \"none\"}|`;\n\n    if (\"pathStrokeColor\" in options) {\n      pathStr += `stroke:${options.pathStrokeColor}|`;\n    }\n\n    if (\"pathWidth\" in options) {\n      const pathWidth = options.pathWidth / (options.hiDPI ? 2 : 1);\n      pathStr += `width:${pathWidth.toString()}|`;\n    }\n\n    pathStr += simplifyAndStringify(options.path);\n    endpoint.searchParams.set(\"path\", pathStr);\n  }\n\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n\n  return endpoint.toString();\n}\n\n/**\n * Construct the URL for a static map using a bounding box\n * Note: this function does not fetch the binary content of the image since\n * the purpose of a static map is generally to have its URL as a `src` property of a <img/> element.\n * If a path is provided and is too long, it will be simplified in an accurate way.\n * @param boundingBox\n * @param options\n * @returns\n */\nfunction bounded(\n  boundingBox: BBox,\n  options: BoundedStaticMapOptions = {},\n): string {\n  const style = styleToStyle(options.style);\n  const scale = options.hiDPI ? \"@2x\" : \"\";\n  const format = options.format ?? \"png\";\n  let width = ~~(options.width ?? 1024);\n  let height = ~~(options.height ?? 1024);\n\n  if (options.hiDPI) {\n    width = ~~(width / 2);\n    height = ~~(height / 2);\n  }\n\n  const endpoint = new URL(\n    `maps/${encodeURIComponent(style)}/static/${boundingBox[0]},${\n      boundingBox[1]\n    },${boundingBox[2]},${boundingBox[3]}/${width}x${height}${scale}.${format}`,\n    defaults.maptilerApiURL,\n  );\n\n  if (\"attribution\" in options) {\n    endpoint.searchParams.set(\"attribution\", options.attribution.toString());\n  }\n\n  if (\"padding\" in options) {\n    endpoint.searchParams.set(\"padding\", options.padding.toString());\n  }\n\n  if (\"markers\" in options) {\n    let markerStr = \"\";\n\n    const hasIcon = \"markerIcon\" in options;\n\n    if (hasIcon) {\n      markerStr += `icon:${options.markerIcon}|`;\n    }\n\n    if (hasIcon && \"markerAnchor\" in options) {\n      markerStr += `anchor:${options.markerAnchor}|`;\n    }\n\n    if (hasIcon && options.hiDPI) {\n      markerStr += `scale:2|`;\n    }\n\n    const markerList = Array.isArray(options.markers[0])\n      ? options.markers\n      : [options.markers];\n    markerStr += markerList\n      .map((m) => staticMapMarkerToString(m, !hasIcon))\n      .join(\"|\");\n    endpoint.searchParams.set(\"markers\", markerStr);\n  }\n\n  if (\"path\" in options) {\n    let pathStr = \"\";\n\n    pathStr += `fill:${options.pathFillColor ?? \"none\"}|`;\n\n    if (\"pathStrokeColor\" in options) {\n      pathStr += `stroke:${options.pathStrokeColor}|`;\n    }\n\n    if (\"pathWidth\" in options) {\n      const pathWidth = options.pathWidth / (options.hiDPI ? 2 : 1);\n      pathStr += `width:${pathWidth.toString()}|`;\n    }\n\n    pathStr += simplifyAndStringify(options.path);\n    endpoint.searchParams.set(\"path\", pathStr);\n  }\n\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n\n  return endpoint.toString();\n}\n\n/**\n * Construct the URL for a static map automatically fitted around the provided path or markers.\n * Note: this function does not fetch the binary content of the image since\n * the purpose of a static map is generally to have its URL as a `src` property of a <img/> element.\n * If a path is provided and is too long, it will be simplified in an accurate way.\n * @param options\n * @returns\n */\nfunction automatic(options: AutomaticStaticMapOptions = {}): string {\n  if (!(\"markers\" in options) && !(\"path\" in options)) {\n    throw new Error(\n      \"Automatic static maps require markers and/or path to be created.\",\n    );\n  }\n\n  const style = styleToStyle(options.style);\n  const scale = options.hiDPI ? \"@2x\" : \"\";\n  const format = options.format ?? \"png\";\n  let width = ~~(options.width ?? 1024);\n  let height = ~~(options.height ?? 1024);\n\n  if (options.hiDPI) {\n    width = ~~(width / 2);\n    height = ~~(height / 2);\n  }\n\n  const endpoint = new URL(\n    `maps/${encodeURIComponent(\n      style,\n    )}/static/auto/${width}x${height}${scale}.${format}`,\n    defaults.maptilerApiURL,\n  );\n\n  if (\"attribution\" in options) {\n    endpoint.searchParams.set(\"attribution\", options.attribution.toString());\n  }\n\n  if (\"padding\" in options) {\n    endpoint.searchParams.set(\"padding\", options.padding.toString());\n  }\n\n  if (\"markers\" in options) {\n    let markerStr = \"\";\n\n    const hasIcon = \"markerIcon\" in options;\n\n    if (hasIcon) {\n      markerStr += `icon:${options.markerIcon}|`;\n    }\n\n    if (hasIcon && \"markerAnchor\" in options) {\n      markerStr += `anchor:${options.markerAnchor}|`;\n    }\n\n    if (hasIcon && options.hiDPI) {\n      markerStr += `scale:2|`;\n    }\n\n    const markerList = Array.isArray(options.markers[0])\n      ? options.markers\n      : [options.markers];\n    markerStr += markerList\n      .map((m) => staticMapMarkerToString(m, !hasIcon))\n      .join(\"|\");\n    endpoint.searchParams.set(\"markers\", markerStr);\n  }\n\n  if (\"path\" in options) {\n    let pathStr = \"\";\n\n    pathStr += `fill:${options.pathFillColor ?? \"none\"}|`;\n\n    if (\"pathStrokeColor\" in options) {\n      pathStr += `stroke:${options.pathStrokeColor}|`;\n    }\n\n    if (\"pathWidth\" in options) {\n      const pathWidth = options.pathWidth / (options.hiDPI ? 2 : 1);\n      pathStr += `width:${pathWidth.toString()}|`;\n    }\n\n    pathStr += simplifyAndStringify(options.path);\n    endpoint.searchParams.set(\"path\", pathStr);\n  }\n\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n\n  return endpoint.toString();\n}\n\n/**\n * The **staticMaps** namespace contains an synchronous function build image URL of static map, as specified by the [MapTiler Static Map API](https://docs.maptiler.com/cloud/api/static-maps/).\n * The URL of static maps can then be used within a `<img />` markup element, as the `src` property value.\n */\nconst staticMaps = {\n  centered,\n  bounded,\n  automatic,\n};\n\nexport { staticMaps };\n","import { Position } from \"geojson\";\n\n/**\n * Average radius of Earth in meters\n */\nconst EARTH_RADIUS = 6371008.8;\n\n/**\n * Average circumfrence of Earth in meters\n */\nconst EARTH_CIRCUMFERENCE = 2 * Math.PI * EARTH_RADIUS;\n\n/**\n * Convert a wgs84 longitude to web Mercator X (west-east axis), where westmost X is 0 and eastmost X is 1.\n */\nfunction longitudeToMercatorX(lng: number): number {\n  return (180 + lng) / 360;\n}\n\n/**\n * Convert a wgs84 latitude to web Mercator Y (north-south axis), where northmost Y is 0 and southmost Y is 1.\n */\nfunction latitudeToMercatorY(lat: number): number {\n  return (\n    (180 -\n      (180 / Math.PI) *\n        Math.log(Math.tan(Math.PI / 4 + (lat * Math.PI) / 360))) /\n    360\n  );\n}\n\n/**\n * Convert a wgs84 position into a web Mercator position where north-west is [0, 0] and south-east is [1, 1]\n */\nfunction wgs84ToMercator(position: Position): Position {\n  const wrappedPos = wrapWgs84(position);\n  return [\n    longitudeToMercatorX(wrappedPos[0]),\n    latitudeToMercatorY(wrappedPos[1]),\n  ];\n}\n\n/**\n * Converts a mercator X (west-east axis in [0, 1]) to wgs84 longitude\n */\nfunction mercatorXToLongitude(x: number): number {\n  return x * 360 - 180;\n}\n\n/**\n * Converts a mercator Y (north-south axis in [0, 1]) to wgs84 latitude\n */\nfunction mercatorYToLatitude(y: number): number {\n  const y2 = 180 - y * 360;\n  return (360 / Math.PI) * Math.atan(Math.exp((y2 * Math.PI) / 180)) - 90;\n}\n\n/**\n * Converts a web Mercator position where north-west is [0, 0] and south-east is [1, 1] into a wgs84\n */\nfunction mercatorToWgs84(position: Position): Position {\n  return [mercatorXToLongitude(position[0]), mercatorYToLatitude(position[1])];\n}\n\n/**\n * Gives the distance in meters between two positions using the Haversine Formula.\n */\nfunction haversineDistanceWgs84(from: Position, to: Position): number {\n  const rad = Math.PI / 180;\n  const lat1 = from[1] * rad;\n  const lat2 = to[1] * rad;\n  const a =\n    Math.sin(lat1) * Math.sin(lat2) +\n    Math.cos(lat1) * Math.cos(lat2) * Math.cos((to[0] - from[0]) * rad);\n\n  const maxMeters = EARTH_RADIUS * Math.acos(Math.min(a, 1));\n  return maxMeters;\n}\n\n/**\n * Compute the cumulated distance for each position of an array of positions.\n * For I positions, there are I-1 distance, hence the distance at i corresponds\n * to the distance from the (i-1)th position to ith\n */\nfunction haversineCumulatedDistanceWgs84(positions: Position[]): number[] {\n  const cumulatedDistance = Array(positions.length);\n  cumulatedDistance[0] = 0;\n  const l = cumulatedDistance.length;\n\n  for (let i = 1; i < l; i++) {\n    cumulatedDistance[i] =\n      haversineDistanceWgs84(positions[i - 1], positions[i]) +\n      cumulatedDistance[i - 1];\n  }\n  return cumulatedDistance;\n}\n\n/**\n * Returns a position that has longitude in [-180, 180]\n */\nfunction wrapWgs84(position: Position): Position {\n  const lng = position[0];\n  const lat = position[1];\n\n  const d = 360;\n  const w = ((((lng + 180) % d) + d) % d) - 180;\n  const wrapLong = w === -180 ? 180 : w;\n\n  return [wrapLong, lat];\n}\n\n/*\n * The circumference at a line of latitude in meters.\n */\nexport function circumferenceAtLatitude(latitude: number) {\n  return EARTH_CIRCUMFERENCE * Math.cos((latitude * Math.PI) / 180);\n}\n\n/**\n * From a given mercator coordinate and a zoom level, computes the tile index\n */\nfunction mercatorToTileIndex(\n  /**\n   * Mercator coordinates (north-west is [0, 0], sourth-east is [1, 1])\n   */\n  position: Position,\n  /**\n   * Zoom level\n   */\n  zoom: number,\n  /**\n   * Returns integer tile indices if `true` or floating-point values if `false`\n   */\n  strict: boolean = true,\n): Position {\n  const numberOfTilePerAxis = 2 ** zoom;\n\n  const fIndex: Position = [\n    position[0] * numberOfTilePerAxis,\n    position[1] * numberOfTilePerAxis,\n  ];\n\n  return strict ? [~~fIndex[0], ~~fIndex[1]] : fIndex;\n}\n\n/**\n * From a given wgs84 coordinate and a zoom level, computes the tile index\n */\nfunction wgs84ToTileIndex(\n  /**\n   * Wgs84 coordinates\n   */\n  position: Position,\n  /**\n   * Zoom level\n   */\n  zoom: number,\n  /**\n   * Returns integer tile indices if `true` or floating-point values if `false`\n   */\n  strict: boolean = true,\n): Position {\n  const merc = wgs84ToMercator(position);\n  return mercatorToTileIndex(merc, zoom, strict);\n}\n\n/**\n * Converts a degree angle into a radian angle\n */\nfunction toRadians(degrees: number): number {\n  return (degrees * Math.PI) / 180;\n}\n\n/**\n * Converts a radian angle to a degree angle\n */\nfunction toDegrees(radians: number): number {\n  return (radians * 180) / Math.PI;\n}\n\n/**\n * Compute an intermediate point between two reference points using the Haversine formula.\n * If ratio is `0`, the returned position is pos1.\n * If ratio is `1`, the returned position is pos2.\n * If ratio is `0.5`, the returned position is halfway pos1 pos2 in distance.\n */\nfunction haversineIntermediateWgs84(\n  pos1: Position,\n  pos2: Position,\n  ratio: number,\n): Position {\n  const d = haversineDistanceWgs84(pos1, pos2);\n  const λ1 = toRadians(pos1[0]);\n  const φ1 = toRadians(pos1[1]);\n  const λ2 = toRadians(pos2[0]);\n  const φ2 = toRadians(pos2[1]);\n\n  const δ = d / EARTH_RADIUS; // Angular distance in radians\n  const a = Math.sin((1 - ratio) * δ) / Math.sin(δ);\n  const b = Math.sin(ratio * δ) / Math.sin(δ);\n  const x = a * Math.cos(φ1) * Math.cos(λ1) + b * Math.cos(φ2) * Math.cos(λ2);\n  const y = a * Math.cos(φ1) * Math.sin(λ1) + b * Math.cos(φ2) * Math.sin(λ2);\n  const z = a * Math.sin(φ1) + b * Math.sin(φ2);\n\n  const φ3 = Math.atan2(z, Math.sqrt(x * x + y * y));\n  const λ3 = Math.atan2(y, x);\n\n  return [toDegrees(λ3), toDegrees(φ3)];\n}\n\nexport const math = {\n  EARTH_RADIUS,\n  EARTH_CIRCUMFERENCE,\n  longitudeToMercatorX,\n  latitudeToMercatorY,\n  wgs84ToMercator,\n  mercatorXToLongitude,\n  mercatorYToLatitude,\n  mercatorToWgs84,\n  haversineDistanceWgs84,\n  wrapWgs84,\n  circumferenceAtLatitude,\n  mercatorToTileIndex,\n  wgs84ToTileIndex,\n  toRadians,\n  toDegrees,\n  haversineIntermediateWgs84,\n  haversineCumulatedDistanceWgs84,\n};\n","import QuickLRU from \"quick-lru\";\nimport { config } from \"./config\";\n\n/**\n * Informations about an image\n */\nexport type PixelData = {\n  /**\n   * The array of pixels as RGBRGB or RGBARGBA in a row-major order\n   */\n  pixels: Uint8ClampedArray | Uint8Array;\n  /**\n   * Width of the image in number of pixels\n   */\n  width: number;\n  /**\n   * Height of the image in number of pixels\n   */\n  height: number;\n  /**\n   * Number of components per pixel (3 if image is RGB, 4 if image is RGBA)\n   */\n  components: number;\n};\n\n/**\n * Type for the function that decodes an image file ArrayBuffer into valid pixel data\n */\nexport type BufferToPixelDataFunction = (ArrayBuffer) => Promise<PixelData>;\n\n/**\n * Main properties necessary from a TileJSON\n */\nexport type TileJSON = {\n  scale: string;\n  format: string;\n  maxzoom: number;\n  minzoom: number;\n  profile: string;\n  description: string;\n  attribution: string;\n  bounds: [number, number, number, number];\n  center: [number, number, number];\n\n  /**\n   * TileJSON version\n   */\n  tilejson: string;\n  name: string;\n  crs: string;\n  crs_wkt: string;\n  extent: [number, number, number, number];\n  tiles: string[];\n};\n\n// The LRU cache for storing tile PixelData\nlet tileCache = null;\n\n/**\n * Singleton-like function to access the tile cache\n */\nexport function getTileCache(): QuickLRU<string, PixelData> {\n  if (!tileCache) {\n    tileCache = new QuickLRU({ maxSize: config.tileCacheSize });\n  }\n  return tileCache;\n}\n\n/**\n * Browser function to decode an image file buffer into valid pixel data\n */\nexport async function bufferToPixelDataBrowser(\n  buff: ArrayBuffer,\n): Promise<PixelData> {\n  const blob = new Blob([buff]);\n  const imageBitmap = await createImageBitmap(blob);\n\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n  canvas.width = imageBitmap.width;\n  canvas.height = imageBitmap.height;\n  ctx.drawImage(imageBitmap, 0, 0);\n\n  const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  return {\n    pixels: imageData.data,\n    width: canvas.width,\n    height: canvas.height,\n    components: imageData.data.length / (canvas.width * canvas.height),\n  };\n}\n\nexport function getBufferToPixelDataParser(): BufferToPixelDataFunction {\n  if (config.bufferToPixelData) {\n    return config.bufferToPixelData;\n  }\n\n  if (typeof window !== \"undefined\") {\n    return bufferToPixelDataBrowser;\n  }\n\n  throw new Error(\n    \"An image file buffer to pixel data parser is necessary. Specify it in `config.bufferToPixelData`\",\n  );\n}\n","import { LineString, MultiLineString, Position } from \"geojson\";\n\nimport { callFetch } from \"../callFetch\";\nimport { config } from \"../config\";\nimport { defaults } from \"../defaults\";\nimport { ServiceError } from \"./ServiceError\";\nimport { math } from \"./math\";\nimport {\n  TileJSON,\n  getBufferToPixelDataParser,\n  getTileCache,\n} from \"../tiledecoding\";\n\nconst terrainTileJsonURL = \"tiles/terrain-rgb-v2/tiles.json\";\nlet terrainTileJson: TileJSON = null;\n\nexport type ElevationAtOptions = {\n  /**\n   * Custom MapTiler Cloud API key to use instead of the one in global `config`\n   */\n  apiKey?: string;\n\n  /**\n   * Zoom level to use for the terrain RGB tileset.\n   * If not provided, the highest zoom level will be used\n   */\n  zoom?: number;\n};\n\n/**\n * Options for batch elevation lookup\n */\nexport type ElevationBatchOptions = ElevationAtOptions & {\n  /**\n   * If provided, a median kernel of the given size will smooth the elevation\n   * to reduce very small local variations\n   */\n  smoothingKernelSize?: number;\n};\n\nconst customMessages = {\n  403: \"Key is missing, invalid or restricted\",\n};\n\nasync function fetchTerrainTileJson(apiKey: string): Promise<TileJSON> {\n  const endpoint = new URL(terrainTileJsonURL, defaults.maptilerApiURL);\n  endpoint.searchParams.set(\"key\", apiKey);\n  const urlWithParams = endpoint.toString();\n\n  const res = await callFetch(urlWithParams);\n  if (res.ok) {\n    terrainTileJson = (await res.json()) as TileJSON;\n    return terrainTileJson;\n  } else {\n    if (!res.ok) {\n      throw new ServiceError(res, customMessages[res.status] ?? \"\");\n    }\n  }\n}\n\n/**\n * Get the elevation at a given position.\n * The returned position is of form [longitude, latitude, altitude]\n */\nasync function at(\n  /**\n   * Wgs84 position as [longitude, latitude]\n   */\n  position: Position,\n  /**\n   * Options\n   */\n  options: ElevationAtOptions = {},\n): Promise<Position> {\n  const apiKey = options.apiKey ?? config.apiKey;\n\n  if (!terrainTileJson) {\n    await fetchTerrainTileJson(apiKey);\n  }\n\n  const maxZoom = terrainTileJson.maxzoom;\n  let zoom = ~~(options.zoom ?? maxZoom);\n  if (zoom > maxZoom || zoom < 0) {\n    zoom = maxZoom;\n  }\n  const tileIndex = math.wgs84ToTileIndex(position, zoom, false);\n\n  const tileX = ~~tileIndex[0];\n  const tileY = ~~tileIndex[1];\n\n  if (!terrainTileJson.tiles.length) {\n    throw new Error(\"Terrain tileJSON tile list is empty.\");\n  }\n\n  const tileID = `terrain_${zoom.toString()}_${tileX.toString()}_${tileY.toString()}`;\n  let tilePixelData;\n\n  const cache = getTileCache();\n\n  if (cache.has(tileID)) {\n    tilePixelData = cache.get(tileID);\n  } else {\n    const tileURL = terrainTileJson.tiles[0]\n      .replace(\"{x}\", tileX.toString())\n      .replace(\"{y}\", tileY.toString())\n      .replace(\"{z}\", zoom.toString());\n\n    const tileRes = await callFetch(tileURL);\n\n    if (!tileRes.ok) {\n      throw new ServiceError(tileRes, customMessages[tileRes.status] ?? \"\");\n    }\n\n    const tileBuff = await tileRes.arrayBuffer();\n    const tileParser = getBufferToPixelDataParser();\n    tilePixelData = await tileParser(tileBuff);\n    cache.set(tileID, tilePixelData);\n  }\n\n  const pixelX = ~~(tilePixelData.width * (tileIndex[0] % 1));\n  const pixelY = ~~(tilePixelData.height * (tileIndex[1] % 1));\n  const pixelDataIndex =\n    (pixelY * tilePixelData.width + pixelX) * tilePixelData.components;\n  const R = tilePixelData.pixels[pixelDataIndex];\n  const G = tilePixelData.pixels[pixelDataIndex + 1];\n  const B = tilePixelData.pixels[pixelDataIndex + 2];\n  const elevation = -10000 + (R * 256 * 256 + G * 256 + B) * 0.1;\n\n  return [position[0], position[1], elevation];\n}\n\n/**\n * Perform a batch elevation request\n */\nasync function batch(\n  /**\n   * Wgs84 positions as [[lng0, lat0], [lng1, lat1], [lng2, lat2], ...]\n   */\n  positions: Position[],\n  /**\n   * Options\n   */\n  options: ElevationBatchOptions = {},\n): Promise<Position[]> {\n  const apiKey = options.apiKey ?? config.apiKey;\n\n  if (!terrainTileJson) {\n    await fetchTerrainTileJson(apiKey);\n  }\n\n  // Better throw about not bein able to parse tiles before fetching them\n  const tileParser = getBufferToPixelDataParser();\n  const tileURLSchema = terrainTileJson.tiles[0];\n  const cache = getTileCache();\n\n  const maxZoom = terrainTileJson.maxzoom;\n  let zoom = ~~(options.zoom ?? maxZoom);\n  if (zoom > maxZoom || zoom < 0) {\n    zoom = maxZoom;\n  }\n  const tileIndicesFloats = positions.map((position) =>\n    math.wgs84ToTileIndex(position, zoom, false),\n  );\n  const tileIndicesInteger = tileIndicesFloats.map((index) => [\n    ~~index[0],\n    ~~index[1],\n  ]);\n  const tileIDs = tileIndicesInteger.map(\n    (index) =>\n      `terrain_${zoom.toString()}_${index[0].toString()}_${index[1].toString()}`,\n  );\n\n  // unique tiles to fetch (excluding those already in cache and the doublons)\n  const uniqueTilesToFetch = Array.from(\n    new Set(tileIDs.filter((tileID) => !cache.has(tileID))),\n  ).map((tileID) => tileID.split(\"_\").slice(1));\n  const tileURLs = uniqueTilesToFetch.map((zxy) =>\n    tileURLSchema\n      .replace(\"{x}\", zxy[1].toString())\n      .replace(\"{y}\", zxy[2].toString())\n      .replace(\"{z}\", zxy[0].toString()),\n  );\n  const promisesFetchTiles = tileURLs.map((url) => callFetch(url));\n  const resTiles = await Promise.allSettled(promisesFetchTiles);\n  const fulfilledRes = resTiles\n    .map((el: PromiseSettledResult<Response>) =>\n      el.status === \"fulfilled\" ? el.value : null,\n    )\n    .filter((res) => res);\n  const fulfilledRButNotOkRes = fulfilledRes.filter((res) => !res.ok);\n\n  if (fulfilledRes.length !== promisesFetchTiles.length) {\n    throw new Error(\"Some tiles could not be fetched.\");\n  }\n\n  if (fulfilledRButNotOkRes.length) {\n    throw new ServiceError(\n      fulfilledRButNotOkRes[0],\n      customMessages[fulfilledRButNotOkRes[0].status] ?? \"\",\n    );\n  }\n\n  const tileArrayBuffers = await Promise.all(\n    fulfilledRes.map((res) => res.arrayBuffer()),\n  );\n\n  // It is possible that the tile is missing\n  if (!tileArrayBuffers.every((buff) => buff.byteLength > 0)) {\n    throw new Error(\"Some tiles are not available.\");\n  }\n\n  const tilePixelDatas = await Promise.all(\n    tileArrayBuffers.map((buff) => tileParser(buff)),\n  );\n\n  // Adding to cache\n  tilePixelDatas.forEach((tilePixelData, i) => {\n    const zxy = uniqueTilesToFetch[i];\n    const tileID = `terrain_${zxy[0].toString()}_${zxy[1].toString()}_${zxy[2].toString()}`;\n    cache.set(tileID, tilePixelData);\n  });\n\n  const elevatedPositions = positions.map((position, i) => {\n    const tileID = tileIDs[i];\n    const tileIndexFloat = tileIndicesFloats[i];\n    const tilePixelData = cache.get(tileID);\n\n    // const pixelX = ~~(tilePixelData.width * (tileIndexFloat[0] % 1));\n    // const pixelY = ~~(tilePixelData.height * (tileIndexFloat[1] % 1));\n\n    const pixelX = Math.min(\n      Math.round(tilePixelData.width * (tileIndexFloat[0] % 1)),\n      tilePixelData.width - 1,\n    );\n    const pixelY = Math.min(\n      Math.round(tilePixelData.height * (tileIndexFloat[1] % 1)),\n      tilePixelData.height - 1,\n    );\n\n    const pixelDataIndex =\n      (pixelY * tilePixelData.width + pixelX) * tilePixelData.components;\n    const R = tilePixelData.pixels[pixelDataIndex];\n    const G = tilePixelData.pixels[pixelDataIndex + 1];\n    const B = tilePixelData.pixels[pixelDataIndex + 2];\n    const elevation = -10000 + (R * 256 * 256 + G * 256 + B) * 0.1;\n\n    return [position[0], position[1], ~~(elevation * 1000) / 1000];\n  });\n\n  // Smoothing\n  if (options.smoothingKernelSize) {\n    // make sure the kernel is of an odd size\n    const kernelSize = ~~(options.smoothingKernelSize / 2) * 2 + 1;\n    const elevations: number[] = elevatedPositions.map((pos) => pos[2]);\n    const kernelSpan = ~~(kernelSize / 2);\n\n    for (let i = kernelSpan; i < elevations.length - kernelSpan - 1; i += 1) {\n      let sum = 0;\n      for (let j = 0; j < kernelSize; j += 1) {\n        const elev = elevations[i - kernelSpan + j];\n        sum += elev;\n      }\n      sum /= kernelSize;\n      elevatedPositions[i][2] = sum;\n    }\n  }\n\n  return elevatedPositions;\n}\n\n/**\n * Creates a clone of a GeoJSON LineString (deep copy with structuredClone) that contains the computed elevation\n * as the third element of each position array ([lng, lat, alt])\n */\nasync function fromLineString(\n  /**\n   * A GeoJSON LineStriung feature\n   */\n  ls: LineString,\n  /**\n   * Options\n   */\n  options: ElevationBatchOptions = {},\n): Promise<LineString> {\n  if (ls.type !== \"LineString\") {\n    throw new Error(\"The provided object is not a GeoJSON LineString\");\n  }\n\n  const clone = structuredClone(ls) as LineString;\n  const elevatedPositions = await batch(clone.coordinates, options);\n  clone.coordinates = elevatedPositions;\n\n  return clone;\n}\n\n/**\n * Creates a clone of a MultiLineString (deep copy with structuredClone) that contains the computed elevation\n * as the third element of each position array ([lng, lat, alt])\n */\nasync function fromMultiLineString(\n  /**\n   * A GeoJSON LineStriung feature\n   */\n  ls: MultiLineString,\n  /**\n   * Options\n   */\n  options: ElevationBatchOptions = {},\n): Promise<MultiLineString> {\n  if (ls.type !== \"MultiLineString\") {\n    throw new Error(\"The provided object is not a GeoJSON MultiLineString\");\n  }\n\n  const clone = structuredClone(ls) as MultiLineString;\n  const multiLengths = clone.coordinates.map((poss) => poss.length);\n\n  // This is equivalent to a batch of batch, so we makes the multilinestring a unique\n  // line string to prevent batch to fetch multiple times the same tile\n  const flattenPositions = clone.coordinates.flat();\n  const flattenPositionsElevated = await batch(flattenPositions, options);\n\n  // And then chopping back into a multi line string\n  const result: Position[][] = [];\n  let index = 0;\n  for (const length of multiLengths) {\n    result.push(flattenPositionsElevated.slice(index, index + length));\n    index += length;\n  }\n\n  clone.coordinates = result;\n  return clone;\n}\n\nexport const elevation = {\n  at,\n  batch,\n  fromLineString,\n  fromMultiLineString,\n};\n"],"mappings":";AAOA,SAASA,eAAkBA,CAAA;EAErB,WAAOC,IAAA,KAAS,WAAa;IACxB,OAAAC,KAAA,CAAMC,IAAA,CAAKF,IAAI;EAAA;EAGxB,IAAI,OAAOG,MAAA,KAAW,WAAe,IAAAA,MAAA,CAAOF,KAAO;IACjD,OAAOE,MAAO,CAAAF,KAAA;EAAA;EAGT;AACT;AAKA,MAAMG,YAAa;EAAnBC,YAAA;IAIE;AAAA;AAAA;IAAA,KAAQC,OAAU;IAMlB;AAAA;AAAA;AAAA;IAAA,KAAQC,MAAA,GAA+BR,eAAgB;IAKvD;AAAA;AAAA;IAAA,KAAOS,aAAwB;EAAA;EAAA;AAAA;AAAA;EAO/B,IAAIC,OAAOC,CAAW;IACpB,KAAKJ,OAAU,GAAAI,CAAA;EAAA;EACjB;AAAA;AAAA;EAKA,IAAID,MAAiBA,CAAA;IACnB,OAAO,IAAK,CAAAH,OAAA;EAAA;EACd;AAAA;AAAA;EAKA,IAAIL,MAAMU,CAAkB;IAC1B,KAAKJ,MAAS,GAAAI,CAAA;EAAA;EAChB;AAAA;AAAA;EAKA,IAAIV,KAA8BA,CAAA;IAChC,OAAO,IAAK,CAAAM,MAAA;EAAA;AAEhB;AAKM,MAAAK,MAAA,GAAS,IAAIR,YAAa;ACvEhC,MAAMS,iBAAoB;EACxBC,IAAM;EACNC,QAAU;EACVC,MAAQ;EACRC,QAAU;EACVC,WAAa;EACbC,WAAa;EACbC,OAAS;EACTC,MAAQ;EACRC,SAAW;EACXC,OAAS;EACTC,OAAS;EACTC,QAAU;EACVC,KAAO;EACPC,MAAQ;EACRC,KAAO;EACPC,OAAS;EACTC,SAAW;EACXC,QAAU;EACVC,OAAS;EACTC,MAAQ;EACRC,OAAS;EACTC,QAAU;EACVC,MAAQ;EACRC,KAAO;EACPC,MAAQ;EACRC,SAAW;EACXC,SAAW;EACXC,KAAO;EACPC,OAAS;EACTC,QAAU;EACVC,OAAS;EACTC,MAAQ;EACRC,MAAQ;EACRC,WAAa;EACbC,OAAS;EACTC,UAAY;EACZC,aAAe;EACfC,UAAY;EACZC,OAAS;EACTC,SAAW;EACXC,MAAQ;EACRC,UAAY;EACZC,QAAU;EACVC,OAAS;EACTC,OAAS;EACTC,eAAiB;EACjBC,gBAAkB;EAClBC,MAAQ;EACRC,OAAS;EACTC,OAAS;EACTC,OAAS;EACTC,IAAM;EACNC,OAAS;EACTC,SAAW;EACXC,KAAO;AACT;AAEA,MAAMC,eAAA,GAAkB,IAAIC,GAAA,CAAIC,MAAO,CAAAC,MAAA,CAAO3D,iBAAiB,CAAC;AAShE,SAAS4D,wBAAoDA,CAAA;EACvD,WAAOC,SAAA,KAAc,WAAa;IAC7B,OAAAC,IAAA,CAAKC,cAAA,EACT,CAAAC,eAAA,GACAC,MAAO,CAAAC,KAAA,CAAM,GAAG,EAAE,CAAC;EAAA;EAGxB,MAAMC,cAAA,GAAiBC,KAAM,CAAAC,IAAA,CAC3B,IAAIZ,GAAA,CAAII,SAAU,CAAAS,SAAA,CAAUC,GAAI,CAACC,CAAM,IAAAA,CAAA,CAAEN,KAAM,IAAG,CAAE,EAAC,CAAC,CAAC,GACvDO,MAAO,CAACD,CAAA,IAAMhB,eAAgB,CAAAkB,GAAA,CAAIF,CAA4B,CAAC;EAEjE,OAAOL,cAAe,CAAAQ,MAAA,GACjBR,cAAe,EAAC,IACjBnE,iBAAkB,CAAAgB,OAAA;AACxB;AClFA,eAAsB4D,SAAUA,CAAAC,QAAA,EAAUC,OAAU,KAAI;EAClD,IAAA/E,MAAA,CAAOX,KAAA,KAAU,IAAM;IACzB,MAAM,IAAI2F,KAAA,CACR,0GACF;EAAA;EAIE,QAAIC,GAAI,CAAAH,QAAQ,CAAE,CAAAI,YAAA,CAAaC,GAAA,CAAI,KAAK,EAAEC,IAAK,OAAM,EAAI;IAC3D,MAAM,IAAIJ,KAAA,CACR,+GACF;EAAA;EAGK,OAAAhF,MAAA,CAAOX,KAAM,CAAAyF,QAAA,EAAUC,OAAO;AACvC;ACdA,MAAMM,QAAW;EACfC,cAAgB;EAChBC,QAAU;AACZ;AAEA5B,MAAA,CAAO6B,MAAA,CAAOH,QAAQ;ACLf,MAAMI,YAAA,SAAqBT,KAAM;EACtCvF,YACSiG,GACP,EAAAC,aAAA,GAAgB,EAChB;IACA,MACE,mBAAmBD,GAAI,CAAAE,GAAG,gCAAgCF,GAAI,CAAAG,MAAM,KAAKF,aAAa,GACxF;IALO,KAAAD,GAAA,GAAAA,GAAA;EAAA;AAOX;ACAA,MAAMI,gBAAiB;EACrB,GAAK;EACL,GAAK;AACP;AAoOA,SAASC,4BACPb,YAAA,EACAH,OACA;EACM;IAAEiB;EAAA,CAAa,GAAAjB,OAAA;EAErB,IAAIiB,QAAA,IAAY,KAAW;IACzB;EAAA;EAGF,MAAMzB,SAAA,GAAYF,KAAM,CAAAC,IAAA,CACtB,IAAIZ,GAAA,EACDW,KAAA,CAAM4B,OAAQ,CAAAD,QAAQ,IAAIA,QAAW,IAACA,QAAQ,CAAG,EAAAxB,GAAA,CAAK0B,IACrD,IAAAA,IAAA,KAASjG,iBAAkB,CAAAC,IAAA,GAAO2D,wBAAA,EAA6B,GAAAqC,IAAA,CACjE,CACF,CACF,CAAEC,IAAA,CAAK,GAAG;EAEGjB,YAAA,CAAAkB,GAAA,CAAI,YAAY7B,SAAS;AACxC;AAEA,SAAS8B,2CACPnB,YAAA,EACAH,OACA;EACA,MAAM;IAAElF,MAAA;IAAQyG,KAAO;IAAAC,KAAA;IAAOC;EAAA,CAAiB,GAAAzB,OAAA;EAE/CG,YAAA,CAAakB,GAAI,QAAOvG,MAAU,IAAAG,MAAA,CAAOH,MAAM;EAE/C,IAAIyG,KAAA,IAAS,KAAW;IACtBpB,YAAA,CAAakB,GAAI,UAASK,MAAO,CAAAH,KAAK,CAAC;EAAA;EAGzC,IAAIC,KAAA,IAAS,KAAW;IACtBrB,YAAA,CAAakB,GAAI,UAASG,KAAM,CAAAJ,IAAA,CAAK,GAAG,CAAC;EAAA;EAG3C,IAAIK,YAAA,IAAgB,KAAW;IAC7BtB,YAAA,CAAakB,GAAI,iBAAgBK,MAAO,CAAAD,YAAY,CAAC;EAAA;EAGvDT,2BAAA,CAA4Bb,YAAA,EAAcH,OAAO;AACnD;AAEA,SAAS2B,2BACPxB,YAAA,EACAH,OACA;EACAsB,0CAAA,CAA2CnB,YAAA,EAAcH,OAAO;EAEhE,MAAM;IAAE4B,IAAM;IAAAC,SAAA;IAAWC,OAAS;IAAAC,UAAA;IAAYC;EAAA,CAAiB,GAAAhC,OAAA;EAE/D,IAAI4B,IAAA,IAAQ,KAAW;IACrBzB,YAAA,CAAakB,GAAI,SAAQO,IAAK,CAAAR,IAAA,CAAK,GAAG,CAAC;EAAA;EAGzC,IAAIS,SAAA,IAAa,KAAW;IACb1B,YAAA,CAAAkB,GAAA,CACX,aACAQ,SAAc,YAAOA,SAAY,GAAAA,SAAA,CAAUT,IAAA,CAAK,GAAG,EACrD;EAAA;EAGF,IAAIU,OAAA,IAAW,KAAW;IACxB3B,YAAA,CAAakB,GAAI,YAAWS,OAAQ,CAAAV,IAAA,CAAK,GAAG,CAAC;EAAA;EAG/C,IAAIW,UAAA,IAAc,KAAW;IAC3B5B,YAAA,CAAakB,GAAI,eAAcU,UAAa,YAAS,OAAO;EAAA;EAG9D,IAAIC,YAAA,IAAgB,KAAW;IAC7B7B,YAAA,CAAakB,GAAI,iBAAgBW,YAAe,YAAS,OAAO;EAAA;AAEpE;AAWA,eAAeC,OACbA,CAAAC,KAAA,EACAlC,OAA4B,KACI;EAChC,IAAI,OAAOkC,KAAU,iBAAYA,KAAA,CAAM7B,IAAK,GAAER,MAAA,KAAW,CAAG;IACpD,UAAII,KAAA,CAAM,sCAAsC;EAAA;EAGxD,MAAMkC,QAAA,GAAW,IAAIjC,GAAA,CACnB,aAAakC,kBAAmB,CAAAF,KAAK,CAAC,SACtC5B,QAAS,CAAAC,cAAA,CACX;EAEM;IAAEJ;EAAA,CAAiB,GAAAgC,QAAA;EAEzBR,0BAAA,CAA2BxB,YAAA,EAAcH,OAAO;EAE1C,MAAAqC,aAAA,GAAgBF,QAAA,CAASG,QAAS;EAElC,MAAA3B,GAAA,GAAM,MAAMb,SAAA,CAAUuC,aAAa;EAErC,KAAC1B,GAAA,CAAI4B,EAAI;IACX,MAAM,IAAI7B,YAAa,CAAAC,GAAA,EAAKI,gBAAA,CAAeJ,GAAI,CAAAG,MAAM,KAAK,EAAE;EAAA;EAGxD,MAAA0B,GAAA,GAA6B,MAAM7B,GAAA,CAAI8B,IAAK;EAE3C,OAAAD,GAAA;AACT;AAUA,eAAeE,OACbA,CAAAC,QAAA,EACA3C,OAAmC,KACH;EAChC,IAAI,CAACV,KAAM,CAAA4B,OAAA,CAAQyB,QAAQ,CAAK,IAAAA,QAAA,CAAS9C,MAAA,GAAS,CAAG;IAC7C,UAAII,KAAA,CAAM,mDAAmD;EAAA;EAGrE,MAAMkC,QAAA,GAAW,IAAIjC,GAAA,CACnB,aAAayC,QAAS,EAAC,CAAC,IAAIA,QAAA,CAAS,CAAC,CAAC,SACvCrC,QAAS,CAAAC,cAAA,CACX;EAE2Ce,0CAAA,CAAAa,QAAA,CAAShC,YAAA,EAAcH,OAAO;EAEnE,MAAAqC,aAAA,GAAgBF,QAAA,CAASG,QAAS;EAElC,MAAA3B,GAAA,GAAM,MAAMb,SAAA,CAAUuC,aAAa;EAErC,KAAC1B,GAAA,CAAI4B,EAAI;IACX,MAAM,IAAI7B,YAAa,CAAAC,GAAA,EAAKI,gBAAA,CAAeJ,GAAI,CAAAG,MAAM,KAAK,EAAE;EAAA;EAGxD,MAAA0B,GAAA,GAA6B,MAAM7B,GAAA,CAAI8B,IAAK;EAE3C,OAAAD,GAAA;AACT;AAWA,eAAeI,IACbA,CAAAC,EAAA,EACA7C,OAAgC,KACA;EAChC,MAAMmC,QAAA,GAAW,IAAIjC,GAAA,CAAI,aAAa2C,EAAE,SAASvC,QAAA,CAASC,cAAc;EACxE4B,QAAA,CAAShC,YAAA,CAAakB,GAAI,QAAOrB,OAAQ,CAAAlF,MAAA,IAAUG,MAAA,CAAOH,MAAM;EAEpCkG,2BAAA,CAAAmB,QAAA,CAAShC,YAAA,EAAcH,OAAO;EAEpD,MAAAqC,aAAA,GAAgBF,QAAA,CAASG,QAAS;EAElC,MAAA3B,GAAA,GAAM,MAAMb,SAAA,CAAUuC,aAAa;EAErC,KAAC1B,GAAA,CAAI4B,EAAI;IACX,MAAM,IAAI7B,YAAa,CAAAC,GAAA,EAAKI,gBAAA,CAAeJ,GAAI,CAAAG,MAAM,KAAK,EAAE;EAAA;EAGxD,MAAA0B,GAAA,GAA6B,MAAM7B,GAAA,CAAI8B,IAAK;EAE3C,OAAAD,GAAA;AACT;AAUA,eAAeM,OACbC,CAAAC,OAAA,EACAhD,OAA4B,KACM;EAC9B,KAACgD,OAAA,CAAQnD,MAAQ;IACnB,OAAO,EAAC;EAAA;EAGJ,MAAAoD,WAAA,GAAcD,OACjB,CAAAvD,GAAA,CAAKyC,KAAA,IAAUE,kBAAA,CAAmBF,KAAK,CAAC,CACxC,CAAAd,IAAA,CAAK,GAAG;EAEX,MAAMe,QAAA,GAAW,IAAIjC,GAAA,CACnB,aAAa+C,WAAW,SACxB3C,QAAS,CAAAC,cAAA,CACX;EAEM;IAAEJ;EAAA,CAAiB,GAAAgC,QAAA;EAEzBR,0BAAA,CAA2BxB,YAAA,EAAcH,OAAO;EAE1C,MAAAqC,aAAA,GAAgBF,QAAA,CAASG,QAAS;EAElC,MAAA3B,GAAA,GAAM,MAAMb,SAAA,CAAUuC,aAAa;EAErC,KAAC1B,GAAA,CAAI4B,EAAI;IACX,MAAM,IAAI7B,YAAa,CAAAC,GAAA,EAAKI,gBAAA,CAAeJ,GAAI,CAAAG,MAAM,KAAK,EAAE;EAAA;EAGxD,MAAA0B,GAAA,GAAM,MAAM7B,GAAA,CAAI8B,IAAK;EAE3B,OAAOO,OAAQ,CAAAnD,MAAA,KAAW,CAAI,IAAC2C,GAAG,CAAI,GAAAA,GAAA;AACxC;AAOA,MAAMU,SAAY;EAChBjB,OAAA;EACAS,OAAA;EACAE,IAAA;EAAAG,KAAA,EACAD,OAAA;EACA7B,QAAU,EAAA/F;AACZ;ACxdA,MAAMiI,gBAAiB;EACrB,GAAK;AACP;AAsGA,eAAeC,KACbpD,OAAkC,KACN;EAC5B,MAAMmC,QAAW,OAAIjC,GAAI,wBAAuBI,QAAA,CAASC,cAAc;EACvE4B,QAAA,CAAShC,YAAA,CAAakB,GAAI,QAAOrB,OAAQ,CAAAlF,MAAA,IAAUG,MAAA,CAAOH,MAAM;EAC1D,MAAAuH,aAAA,GAAgBF,QAAA,CAASG,QAAS;EAElC,MAAA3B,GAAA,GAAM,MAAMb,SAAA,CAAUuC,aAAa;EAErC,KAAC1B,GAAA,CAAI4B,EAAI;IACX,MAAM,IAAI7B,YAAA,CACRC,GAAA,EACAA,GAAA,CAAIG,MAAU,IAAAqC,gBAAA,GAAiBA,gBAAe,CAAAxC,GAAA,CAAIG,MAAM,CAAI,MAC9D;EAAA;EAGI,MAAA0B,GAAA,GAAM,MAAM7B,GAAA,CAAI8B,IAAK;EACpB,OAAAD,GAAA;AACT;AAMA,MAAMa,WAAc;EAClBD;AACF;AClIA,MAAME,gBAAiB;EACrB,GAAK;AACP;AA0GA,eAAeC,MACbA,CAAArB,KAAA,EACAlC,OAAoC,KACH;EACjC,IAAI,OAAOkC,KAAU,iBAAYA,KAAA,CAAM7B,IAAK,GAAER,MAAA,KAAW,CAAG;IACpD,UAAII,KAAA,CAAM,sCAAsC;EAAA;EAGxD,MAAMkC,QAAA,GAAW,IAAIjC,GAAA,CACnB,sBAAsBgC,KAAK,SAC3B5B,QAAS,CAAAC,cAAA,CACX;EACA4B,QAAA,CAAShC,YAAA,CAAakB,GAAI,QAAOrB,OAAQ,CAAAlF,MAAA,IAAUG,MAAA,CAAOH,MAAM;EAEhE,IAAI,WAAWkF,OAAS;IACtBmC,QAAA,CAAShC,YAAA,CAAakB,GAAI,UAASrB,OAAQ,CAAAuB,KAAA,CAAMe,QAAA,EAAU;EAAA;EAG7D,IAAI,qBAAqBtC,OAAS;IAChCmC,QAAA,CAAShC,YAAa,CAAAkB,GAAA,CACpB,mBACArB,OAAA,CAAQwD,eAAA,CAAgBlB,QAAS,GACnC;EAAA;EAGF,IAAI,aAAatC,OAAS;IACxBmC,QAAA,CAAShC,YAAA,CAAakB,GAAI,YAAWrB,OAAQ,CAAAyD,OAAA,CAAQnB,QAAA,EAAU;EAAA;EAG3D,MAAAD,aAAA,GAAgBF,QAAA,CAASG,QAAS;EAClC,MAAA3B,GAAA,GAAM,MAAMb,SAAA,CAAUuC,aAAa;EAErC,KAAC1B,GAAA,CAAI4B,EAAI;IACX,MAAM,IAAI7B,YAAA,CACRC,GAAA,EACAA,GAAA,CAAIG,MAAU,IAAAwC,gBAAA,GAAiBA,gBAAe,CAAA3C,GAAA,CAAIG,MAAM,CAAI,MAC9D;EAAA;EAGI,MAAA0B,GAAA,GAAM,MAAM7B,GAAA,CAAI8B,IAAK;EACpB,OAAAD,GAAA;AACT;AAoDA,eAAekB,SACbA,CAAAC,SAAA,EACA3D,OAAuC,KACH;EAC9B,MAAA4D,cAAA,IAAkBtE,KAAM,CAAA4B,OAAA,CAAQyC,SAAU,EAAC,CAAC,CAAI,GAAAA,SAAA,GAAY,CAACA,SAAS,CACzE,EAAAlE,GAAA,CAAKoE,KAAU,OAAGA,KAAM,EAAC,CAAC,IAAIA,KAAM,EAAC,CAAC,EAAE,CACxC,CAAAzC,IAAA,CAAK,GAAG;EAEX,MAAMe,QAAA,GAAW,IAAIjC,GAAA,CACnB,yBAAyB0D,cAAc,SACvCtD,QAAS,CAAAC,cAAA,CACX;EACA4B,QAAA,CAAShC,YAAA,CAAakB,GAAI,QAAOrB,OAAQ,CAAAlF,MAAA,IAAUG,MAAA,CAAOH,MAAM;EAEhE,IAAI,eAAekF,OAAS;IAC1BmC,QAAA,CAAShC,YAAA,CAAakB,GAAI,UAASrB,OAAQ,CAAA8D,SAAA,CAAUxB,QAAA,EAAU;EAAA;EAGjE,IAAI,eAAetC,OAAS;IAC1BmC,QAAA,CAAShC,YAAA,CAAakB,GAAI,UAASrB,OAAQ,CAAA+D,SAAA,CAAUzB,QAAA,EAAU;EAAA;EAGjE,IAAI,gBAAgBtC,OAAS;IAC3BmC,QAAA,CAAShC,YAAa,CAAAkB,GAAA,CACpB,QACC/B,KAAM,CAAA4B,OAAA,CAAQlB,OAAQ,CAAAgE,UAAU,CAC7B,GAAAhE,OAAA,CAAQgE,UACR,IAAChE,OAAQ,CAAAgE,UAAU,CACrB,EAAA5C,IAAA,CAAK,GAAG,EACZ;EAAA;EAGI,MAAAiB,aAAA,GAAgBF,QAAA,CAASG,QAAS;EAClC,MAAA3B,GAAA,GAAM,MAAMb,SAAA,CAAUuC,aAAa;EAErC,KAAC1B,GAAA,CAAI4B,EAAI;IACX,MAAM,IAAI7B,YAAA,CACRC,GAAA,EACAA,GAAA,CAAIG,MAAU,IAAAwC,gBAAA,GAAiBA,gBAAe,CAAA3C,GAAA,CAAIG,MAAM,CAAI,MAC9D;EAAA;EAGI,MAAA0B,GAAA,GAAM,MAAM7B,GAAA,CAAI8B,IAAK;EACpB,OAAAD,GAAA;AACT;AAMA,MAAMyB,WAAc;EAClBV,MAAA;EACAG;AACF;AC9PA,MAAMQ,gBAAiB;EACrB,GAAK;AACP;AAkBA,eAAe9D,GACbA,CAAA+D,MAAA,EACAnE,OAA0B,KACE;EAC5B,IAAI,OAAOmE,MAAW,iBAAYA,MAAA,CAAO9D,IAAK,GAAER,MAAA,KAAW,CAAG;IACtD,UAAII,KAAA,CAAM,wCAAwC;EAAA;EAG1D,MAAMkC,QAAA,GAAW,IAAIjC,GAAA,CACnB,QAAQkC,kBAAmB,CAAA+B,MAAM,CAAC,kBAClC7D,QAAS,CAAAC,cAAA,CACX;EACA4B,QAAA,CAAShC,YAAA,CAAakB,GAAI,QAAOrB,OAAQ,CAAAlF,MAAA,IAAUG,MAAA,CAAOH,MAAM;EAC1D,MAAAuH,aAAA,GAAgBF,QAAA,CAASG,QAAS;EAElC,MAAA3B,GAAA,GAAM,MAAMb,SAAA,CAAUuC,aAAa;EAErC,KAAC1B,GAAA,CAAI4B,EAAI;IACX,MAAM,IAAI7B,YAAA,CACRC,GAAA,EACAA,GAAA,CAAIG,MAAU,IAAAoD,gBAAA,GAAiBA,gBAAe,CAAAvD,GAAA,CAAIG,MAAM,CAAI,MAC9D;EAAA;EAGI,MAAA0B,GAAA,GAAM,MAAM7B,GAAA,CAAI8B,IAAK;EACpB,OAAAD,GAAA;AACT;AAMA,MAAM4B,IAAO;EACXhE;AACF;ACvDO,SAASiE,eAAeC,KAAe;EAE5C,MAAMC,mBAAsB;EACxB,IAAAC,KAAA;EACE,MAAAC,OAAA,GAAUH,KAAA,CAAMjE,IAAK;EACvB,IAAAqE,aAAA;EAGJ,IAAID,OAAA,CAAQE,UAAW,UAAS,KAAKF,OAAQ,CAAAE,UAAA,CAAW,UAAU,CAAG;IACnDD,aAAA,GAAAD,OAAA;EAAA,YACND,KAAQ,GAAAD,mBAAA,CAAoBK,IAAK,CAAAH,OAAO,OAAO,IAAM;IAC/CC,aAAA,oCAAiCF,KAAM,EAAC,CAAC;EAAA,CACpD;IAELE,aAAA,GAAgB,iCAAiCD,OAAO;EAAA;EAGnD,OAAAC,aAAA;AACT;AAqBO,MAAMG,eAAgB;EAC3BnK,YAIUoK,IAKA,EAAAC,WAAA,EAKAlC,EAKA,EAAAmC,cAAA,EAKAC,WAAA,EAKAC,QACR;IA1BQ,KAAAJ,IAAA,GAAAA,IAAA;IAKA,KAAAC,WAAA,GAAAA,WAAA;IAKA,KAAAlC,EAAA,GAAAA,EAAA;IAKA,KAAAmC,cAAA,GAAAA,cAAA;IAKA,KAAAC,WAAA,GAAAA,WAAA;IAKA,KAAAC,QAAA,GAAAA,QAAA;EAAA;EACP;AAAA;AAAA;AAAA;EAMHC,OAAkBA,CAAA;IAChB,OAAO,IAAK,CAAAL,IAAA;EAAA;EAGdM,WAAsBA,CAAA;IACpB,OAAO,GAAG,IAAK,CAAAJ,cAAA,CAAeG,OAAA,EAAS,IAAI,KAAKL,IAAI;EAAA;EACtD;AAAA;AAAA;AAAA;EAMAO,OAAkBA,CAAA;IAChB,OAAO,IAAK,CAAAN,WAAA;EAAA;EACd;AAAA;AAAA;AAAA;EAMAO,KAAgBA,CAAA;IACd,OAAO,IAAK,CAAAzC,EAAA;EAAA;EACd;AAAA;AAAA;EAKA0C,cAAyBA,CAAA;IACvB,OAAO,IAAK,CAAAN,WAAA;EAAA;EACd;AAAA;AAAA;AAAA;EAMAO,iBAAuCA,CAAA;IACrC,OAAO,IAAK,CAAAR,cAAA;EAAA;EACd;AAAA;AAAA;AAAA;AAAA;AAAA;EAQAS,WAAWV,WAA8B;IAChC,YAAKC,cAAe,CAAAS,UAAA,CAAWV,WAAW;EAAA;EACnD;AAAA;AAAA;AAAA;AAAA;AAAA;EAQAW,WAAWX,WAAsC;IACxC,YAAKC,cAAe,CAAAU,UAAA,CAAWX,WAAW;EAAA;EACnD;AAAA;AAAA;AAAA;EAMAY,WAAsCA,CAAA;IAC7B,YAAKX,cAAA,CAAeW,WAAY,GAAEhG,MAAA,CAAQiG,CAAA,IAAMA,CAAA,KAAM,IAAI;EAAA;EACnE;AAAA;AAAA;AAAA;EAMAC,WAAsBA,CAAA;IACpB,OAAO,IAAK,CAAAX,QAAA;EAAA;EACd;AAAA;AAAA;AAAA;EAMAY,mBAA8BA,CAAA;IACrB,OAAAzB,cAAA,CAAe,IAAK,CAAAiB,KAAA,EAAO;EAAA;AAEtC;AAKO,MAAMS,iBAAkB;EAW7BrL,YAIUoK,IAAA,EAKAjC,EACR;IANQ,KAAAiC,IAAA,GAAAA,IAAA;IAKA,KAAAjC,EAAA,GAAAA,EAAA;IAhBV;AAAA;AAAA;IAAA,KAAQmD,QAAA,GAA+C,EAAC;IAKxD;AAAA;AAAA;IAAA,KAAQC,eAAA,GAA0C,EAAC;EAAA;EAYhD;AAAA;AAAA;AAAA;EAMHd,OAAkBA,CAAA;IAChB,OAAO,IAAK,CAAAL,IAAA;EAAA;EACd;AAAA;AAAA;AAAA;EAMAQ,KAAgBA,CAAA;IACd,OAAO,IAAK,CAAAzC,EAAA;EAAA;EACd;AAAA;AAAA;AAAA;EAMAqD,WAAWN,CAAoB;IAC7B,KAAKI,QAAS,CAAAJ,CAAA,CAAEP,OAAQ,EAAC,CAAI,GAAAO,CAAA;IACxB,KAAAK,eAAA,CAAgBE,IAAA,CAAKP,CAAC;EAAA;EAC7B;AAAA;AAAA;AAAA;AAAA;EAOAH,WAAWV,WAA8B;IACvC,OAAOA,WAAA,IAAe,IAAK,CAAAiB,QAAA;EAAA;EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;EAQAN,WAAWX,WAAsC;IACxC,OAAAA,WAAA,IAAe,KAAKiB,QACvB,QAAKA,QAAA,CAASjB,WAAW,IACzB,IAAK,CAAAkB,eAAA,CAAgB,CAAC;EAAA;EAC5B;AAAA;AAAA;AAAA;EAMAN,WAAsCA,CAAA;IAC7B,OAAA/G,MAAA,CAAOC,MAAO,MAAKmH,QAAQ;EAAA;EACpC;AAAA;AAAA;AAAA;EAMAI,iBAAqCA,CAAA;IAC5B,YAAKH,eAAA,CAAgB,CAAC;EAAA;AAEjC;AA0PO,MAAMI,kBAA4C,IACvD;EACEC,gBAAkB;EAClBxB,IAAM;EACNG,WAAa;EACbe,QAAU,GACR;IACEnD,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ,EACA;IACErC,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ,EACA;IACErC,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ,EACA;IACErC,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ,EACA;IACErC,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ;AACF,CACF,EAEA;EACEoB,gBAAkB;EAClBxB,IAAM;EACNG,WAAa;EACbe,QAAU,GACR;IACEnD,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ,EACA;IACErC,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ;AACF,CACF,EAEA;EACEoB,gBAAkB;EAClBxB,IAAM;EACNG,WAAa;EACbe,QAAU,GACR;IACEnD,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ,EACA;IACErC,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ;AACF,CACF,EAEA;EACEoB,gBAAkB;EAClBxB,IAAM;EACNG,WAAa;EACbe,QAAU,GACR;IACEnD,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ;AACF,CACF,EAEA;EACEoB,gBAAkB;EAClBxB,IAAM;EACNG,WAAa;EACbe,QAAU,GACR;IACEnD,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ;AACF,CACF,EAEA;EACEoB,gBAAkB;EAClBxB,IAAM;EACNG,WAAa;EACbe,QAAU,GACR;IACEnD,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ,EACA;IACErC,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ,EACA;IACErC,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ;AACF,CACF,EAEA;EACEoB,gBAAkB;EAClBxB,IAAM;EACNG,WAAa;EACbe,QAAU,GACR;IACEnD,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ,EACA;IACErC,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ,EACA;IACErC,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ,EACA;IACErC,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ;AACF,CACF,EAEA;EACEoB,gBAAkB;EAClBxB,IAAM;EACNG,WAAa;EACbe,QAAU,GACR;IACEnD,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ;AACF,CACF,EAEA;EACEoB,gBAAkB;EAClBxB,IAAM;EACNG,WAAa;EACbe,QAAU,GACR;IACEnD,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ,EACA;IACErC,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ,EACA;IACErC,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ,EACA;IACErC,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ,EACA;IACErC,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ;AACF,CACF,EAEA;EACEoB,gBAAkB;EAClBxB,IAAM;EACNG,WAAa;EACbe,QAAU,GACR;IACEnD,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ,EACA;IACErC,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ,EACA;IACErC,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ,EACA;IACErC,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ;AACF,CACF,EAEA;EACEoB,gBAAkB;EAClBxB,IAAM;EACNG,WAAa;EACbe,QAAU,GACR;IACEnD,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ,EACA;IACErC,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ,EACA;IACErC,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ,EACA;IACErC,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ;AACF,CACF,EAEA;EACEoB,gBAAkB;EAClBxB,IAAM;EACNG,WAAa;EACbe,QAAU,GACR;IACEnD,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ,EACA;IACErC,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ,EACA;IACErC,EAAI;IACJiC,IAAM;IACNC,WAAa;IACbE,WAAa;IACbC,QAAU;EAAA,CACZ;AACF,CACF,EAEA;EACEoB,gBAAkB;EAClBxB,IAAM;EACNG,WAAa;EACbe,QAAU,GACR;IACE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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}